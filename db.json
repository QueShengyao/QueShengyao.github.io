{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529862204919},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529862204919},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1529862204922},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1529862204919},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1529862204922},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529862204922},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1529862204922},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1529862204923},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1529862204923},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1529862204929},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1529862204958},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1529862204922},{"_id":"source/_posts/.DS_Store","hash":"bae5d458f06751745861c200804cfd8a118e046f","modified":1539102197327},{"_id":"source/_posts/C-Delegate.md","hash":"39e26f5537226703c36753de32b632a19d03d5f6","modified":1538920656659},{"_id":"source/_posts/AESAlgo.md","hash":"e83da973cf5a0b31d5e26956e6c8ee465042f57d","modified":1538920656650},{"_id":"source/_posts/C-DisposeVSFinalize.md","hash":"3c33cd6f6be2808ffa2857e726115af0875b9e33","modified":1538920656659},{"_id":"source/_posts/NGINX-负载均衡.md","hash":"b44c1abbe45ddeb2b3d6f3aaf0ab5cf48cd543d7","modified":1539014352779},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1529862204910},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1529862204913},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1529862194481},{"_id":"themes/next/.git/index","hash":"877980060d3ef2ae32325d145c3618d511178db8","modified":1548572294325},{"_id":"themes/next/.git/packed-refs","hash":"0329f6a1db1241bac840ff707c673990a1d77e53","modified":1529862204909},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1529862204920},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1529862204920},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1529862204921},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529862204921},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1529862204921},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1529862204921},{"_id":"source/_posts/C-Singleton.md","hash":"4f1d02baaf1fe6c8dcf83e6e1f4456d00081a12d","modified":1538920656659},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1529862204924},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1529862204924},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1529862204925},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1529862204925},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1529862204925},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1529862204925},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1529862204925},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1529862204926},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1529862204932},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1529862204957},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1529862204957},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1529862204957},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1529862204957},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1529862204957},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1529862204958},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1529862204958},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1529862204929},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1529862204929},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1529862204929},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1529862204929},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1529862204929},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1529862204929},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1529862204930},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1529862204930},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1529862204930},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1529862204930},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1529862204930},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1529862204930},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1529862204931},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1529862204931},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1529862204931},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1529862204931},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1529862204931},{"_id":"themes/next/scripts/helpers.js","hash":"4cc592788f088a99dd1d70875e8344b6e16cc34d","modified":1529862204958},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1529862204959},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529862204959},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529862205049},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529862205049},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529862205050},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1529862204919},{"_id":"themes/next/_config.yml","hash":"dce4ae9d7b648a578dde1b6773c7212cfcaec652","modified":1529862204923},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1529862204923},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862205004},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1529862194482},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1529862194485},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1529862194485},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1529862194483},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1529862194485},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1529862194483},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1529862194484},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1529862194484},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1529862194486},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1529862194481},{"_id":"themes/next/.git/logs/HEAD","hash":"f7f92725bd94e6800f17784b9e1507b86043f62e","modified":1529862204911},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1529862204926},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1529862204926},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1529862204926},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1529862204926},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1529862204927},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1529862204927},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1529862204927},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1529862204927},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1529862204928},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1529862204928},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1529862204928},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1529862204928},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1529862204928},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529862204931},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529862204932},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529862204932},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529862204933},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1529862204933},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1529862204934},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1529862194484},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1529862204935},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1529862204937},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1529862204937},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1529862204938},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1529862204938},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cf8fe76993b513b97f379832222b6ec7e41a1c15","modified":1529862204939},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1529862204940},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1529862204940},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1529862204942},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1529862204942},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1529862204942},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1529862204943},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1529862204947},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1529862204951},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1529862204951},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1529862204952},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1529862204953},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1529862204953},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529862204953},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529862204954},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1529862204954},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1529862204959},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1529862204960},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1529862204960},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1529862204960},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1529862204960},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"545102e3aa3ce494f7046abf71cefb7aaf671559","modified":1529862204961},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1529862204961},{"_id":"themes/next/scripts/tags/note.js","hash":"265dc7ee83d3fe317e88058e80aa8170230a005e","modified":1529862204961},{"_id":"themes/next/scripts/tags/tabs.js","hash":"6bdf2a1a23cb9922fa809c79af3b06339c28cd70","modified":1529862204961},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1529862205004},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529862205004},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529862205005},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529862205005},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529862205005},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529862205006},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529862205006},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529862205006},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529862205007},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529862205007},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529862205007},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529862205008},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529862205008},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529862205009},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529862205009},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529862205009},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529862205010},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529862205010},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529862205010},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1529862204936},{"_id":"source/_posts/AESAlgo/S盒.png","hash":"dc8ecf1842bef69f7bb68c96b64d8f14a00cfbcf","modified":1538920656656},{"_id":"source/_posts/AESAlgo/AES-AddRoundKey.png","hash":"34cfe68bc6813c26589c77bf8983ab8fcce437eb","modified":1538920656652},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862204943},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862204943},{"_id":"source/_posts/AESAlgo/S盒逆.png","hash":"858f673bf974b2653bbc326dcb2c2a9be0c70953","modified":1538920656658},{"_id":"source/_posts/AESAlgo/MixColumns.png","hash":"3a0760b1d8ec10096594d86ece591a93de477476","modified":1538920656653},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862204994},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862204994},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862204995},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862205003},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529862205004},{"_id":"themes/next/.git/refs/heads/master","hash":"32db8348ffdb0e145ee994c2fe6842517589e488","modified":1529862204911},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1529862204932},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529862204939},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1529862204939},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1529862204939},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1529862204940},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1529862204940},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1529862204940},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1529862204941},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529862204941},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529862204941},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529862204941},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529862204941},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529862204941},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529862204942},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529862204942},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1529862204942},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1529862204943},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1529862204943},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529862204944},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529862204944},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1529862204944},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529862204943},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529862204944},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529862204944},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1529862204945},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1529862204945},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529862204946},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529862204947},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1529862204946},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529862204947},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529862204947},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529862204948},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1529862204948},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1529862204949},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1529862204949},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1529862204950},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1529862204950},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1529862204950},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1529862204951},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1529862204952},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1529862204952},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1529862204952},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529862204956},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529862204956},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529862204956},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1529862204956},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529862204993},{"_id":"source/_posts/AESAlgo/ShiftRows.svg","hash":"78e12027205357a61a34d98a30e7c4256d8ae4a1","modified":1538920656654},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1529862204994},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529862204993},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1529862204994},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1529862205002},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529862205003},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"66fd28196b8c2ffaddda27e66c4cf4428d7a12ce","modified":1529862205003},{"_id":"themes/next/source/css/_variables/base.styl","hash":"04d0daf587243a983754876fe2928070c3e3b2a8","modified":1529862205004},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1529862205018},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1529862205018},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1529862205018},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1529862205018},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529862205019},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1529862205026},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1529862205027},{"_id":"themes/next/source/js/src/motion.js","hash":"4726b2cf26e9aebb56cf607905471f3acbd690ae","modified":1529862205025},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1529862205027},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1529862205028},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529862205029},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529862205029},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529862205029},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529862205029},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529862205030},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1529862204940},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529862205048},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529862205049},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529862205049},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1529862204933},{"_id":"themes/next/.git/objects/pack/pack-016570dc9ba94ff063125fbf78c56fe4f122124c.idx","hash":"c35c414a6499015534047afe1966434e9ee5bf0c","modified":1529862204896},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529862205044},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1529862204910},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529862204955},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1529862204955},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f7f92725bd94e6800f17784b9e1507b86043f62e","modified":1529862204911},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529862204962},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529862204962},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529862204963},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529862204967},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529862204979},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529862204986},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1529862204989},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529862204989},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529862204989},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529862204990},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529862204990},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1529862204992},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529862204996},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1529862204996},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1529862204996},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1529862204997},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529862204996},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1529862204997},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529862204997},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1529862204998},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529862204999},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529862204999},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529862205000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1529862204999},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1529862205000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529862205001},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1529862205001},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529862205001},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1529862205001},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1529862205002},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1529862205002},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1529862205001},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1529862205026},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529862204962},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529862205037},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529862205045},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529862205046},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529862204962},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529862205036},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529862205036},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529862205048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529862205042},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529862205041},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f7f92725bd94e6800f17784b9e1507b86043f62e","modified":1529862204910},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529862204964},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1529862204963},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529862204964},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529862204964},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529862204965},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529862204964},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1529862204965},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529862204965},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529862204965},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1529862204966},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1529862204966},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529862204966},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529862204966},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529862204966},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529862204967},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529862204967},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529862204967},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529862204970},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1529862204970},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529862204971},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1529862204971},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529862204972},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1529862204972},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529862204972},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529862204972},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529862204973},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1529862204974},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529862204974},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529862204974},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1529862204974},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1529862204975},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1529862204975},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529862204975},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529862204976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529862204976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529862204977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1529862204977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1529862204978},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529862204978},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529862204979},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529862204978},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1529862204980},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1529862204980},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529862204980},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529862204981},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529862204981},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529862204981},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529862204982},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529862204982},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1529862204983},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529862204983},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529862204983},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529862204984},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529862204984},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529862204985},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529862204985},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529862204985},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1529862204985},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1529862204986},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529862204998},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529862204998},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529862205000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1529862204963},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1529862204963},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529862205040},{"_id":"themes/next/.git/objects/pack/pack-016570dc9ba94ff063125fbf78c56fe4f122124c.pack","hash":"35ae2f706396ae793771389034e5f15eeca17818","modified":1529862204895},{"_id":"public/2018/02/20/C-DisposeVSFinalize/index.html","hash":"0ee7c5052f803321d07bcee0a4f266a807e83c90","modified":1561609715129},{"_id":"public/tags/算法/index.html","hash":"f3e286305e0d567313d22a8ac230727735a43076","modified":1561609715129},{"_id":"public/tags/NGINX/index.html","hash":"1f2201a8153dc75b9e56a3c1eeb579d91a9275d3","modified":1561609715130},{"_id":"public/archives/index.html","hash":"534ad7e1375819f1a609e6d86d6943890251410b","modified":1561609715129},{"_id":"public/archives/2018/index.html","hash":"30fc7a8002c14637c51ee2d0577d1677b825f454","modified":1561609715129},{"_id":"public/2018/10/08/NGINX-负载均衡/index.html","hash":"40223dd7381534fe12e1ccd8f334cc663da8d760","modified":1561609715130},{"_id":"public/2018/04/24/AESAlgo/index.html","hash":"89a8f8018d461fe314dca0d38845c16ee6c3e860","modified":1561609715130},{"_id":"public/2018/02/20/C-Singleton/index.html","hash":"7d390d3c4fedcb7904b27985f97e29ae6b466bf3","modified":1561609715130},{"_id":"public/2018/02/20/C-Delegate/index.html","hash":"00805313357c235795b0bd9d9c3982574601d4a2","modified":1561609715130},{"_id":"public/archives/2018/02/index.html","hash":"a9eadc0240070a1adfb0491bbfcbb6f56a47f938","modified":1561609715129},{"_id":"public/archives/2018/04/index.html","hash":"1e91a08df4ccb6ba63432facc5a5025902fa9f30","modified":1561609715129},{"_id":"public/archives/2018/10/index.html","hash":"1bbe3b756eedda1ba23fe1d4f88bfee4285fbf21","modified":1561609715129},{"_id":"public/index.html","hash":"8346d52eb293a3d1d08cb13ad6510d19cc278e81","modified":1561609715130},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1539014361568},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1539014361568},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539014361568},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1539014361568},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1539014361569},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1539014361569},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1539014361569},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1539014361569},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1539014361569},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1539014361569},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1539014361569},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1539014361569},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539014361569},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1539014361569},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539014361569},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1539014361569},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1539014361569},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539014361569},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1539014361570},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1539014361570},{"_id":"public/2018/04/24/AESAlgo/MixColumns.png","hash":"3a0760b1d8ec10096594d86ece591a93de477476","modified":1539014361570},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539014362151},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539014362155},{"_id":"public/2018/04/24/AESAlgo/ShiftRows.svg","hash":"78e12027205357a61a34d98a30e7c4256d8ae4a1","modified":1539014362155},{"_id":"public/2018/04/24/AESAlgo/S盒.png","hash":"dc8ecf1842bef69f7bb68c96b64d8f14a00cfbcf","modified":1539014362155},{"_id":"public/2018/04/24/AESAlgo/S盒逆.png","hash":"858f673bf974b2653bbc326dcb2c2a9be0c70953","modified":1539014362155},{"_id":"public/2018/04/24/AESAlgo/AES-AddRoundKey.png","hash":"34cfe68bc6813c26589c77bf8983ab8fcce437eb","modified":1539014362155},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1539014362161},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1539014362161},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1539014362161},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1539014362161},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1539014362161},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1539014362161},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1539014362161},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1539014362161},{"_id":"public/js/src/motion.js","hash":"4726b2cf26e9aebb56cf607905471f3acbd690ae","modified":1539014362161},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1539014362161},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1539014362161},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1539014362161},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1539014362162},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1539014362162},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1539014362162},{"_id":"public/css/main.css","hash":"e8eb7aa7c9f20d4885756ea86abc30ec461bfe8d","modified":1539014362162},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1539014362162},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1539014362162},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1539014362162},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1539014362162},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1539014362163},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1539014362163},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539014362163},{"_id":"source/.DS_Store","hash":"8542e78c141903b5d684d829116a0653361d6653","modified":1539181172567},{"_id":"source/_posts/AESAlgo/ShiftRows.png","hash":"ff1b42944857e2f95249167af6c3883d0969080f","modified":1539102260793},{"_id":"public/2018/04/24/AESAlgo/ShiftRows.png","hash":"ff1b42944857e2f95249167af6c3883d0969080f","modified":1561609715131}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"C# 委托","date":"2018-02-20T03:44:09.000Z","_content":"# 委托是什么\n在C语言中，有一个函数指针的概念：\n`returnType (*func)(T1,  T2...)`\n\n在这样一个语句中，我们定义了指向返回类型是returnType，参数为T1，T2...的函数的指针func，func实质上是一个指向函数对应内存地址的指针。\nC#中的委托和函数指针概念很相近，它可以被理解为是.NET中类型安全的函数指针。委托允许我们在运行时指定调用的方法，但是该方法必须符合一定的规范（与所定义委托的返回类型和参数相同）。\n实际上，.NET是在C语言函数指针的基础上为函数添加了一个容器（本文中的委托），只有符合这个容器尺寸（返回值，参数列表相同）的函数才能被装进这个容器。在Runtime，.NET会通过调用 容器代码来达成C语言中直接调用函数指针的目的。这也是委托为什么是类型安全的原因。\n有趣的是，委托只检查传入函数的返回值和参数，并不关注传入函数是实例方法还是静态方法，它能接收这两种函数类型。\n# 委托的使用\n## 1.声明\n在使用委托之前，我们首先需要声明它。\n委托在定义时和关键字的使用方法类似，我们只需要在声明函数的语句前面加一个delegate，就把这个语句变成了委托声明语句，比如:\ndelegate double TwoLongsOp(long first, long second);\n\n定义了一个输入两个long参数，返回一个double值的委托 TwoLongsOp。\n## 2.使用\n要想使用委托，我们还需要定义一个满足如上输入输出的函数，比如：\n```\nclass MathOperations{\n      double static TwoLongsAdd( long first, long second){\n             return first + second;\n        }\n}\n```\n这里定义一个静态方法，然后，定义一个委托实例：\n`TwoLongsOp  addOp = MathOperations.TwoLongsAdd; `\n\n这样就完成了一个委托的初始化，addOp现在是一个引用MathOperations类中静态方法TwoLongsAdd，我们可以在代码中使用这个委托调用TwoLongsAdd方法了：\n```\nstatic invokeDelegate(TwoLongsOp op, double first, double second){\n       Console.WriteLine($\"LoingOperation Result is : {0}\", op(first, second));\n}\ninvokeDelegate(addOp, 1.0, 2.0);\n```\n以上代码的运行结果是“LoingOperation Result is : 3.0 ”\n## 3.Action<T> 和 Func <T>\n这是C#的语法糖，它们的作用在于更简洁地声明和使用委托，节约代码空间和程序员时间。使用它们，我们就可以省去之前的声明和赋值步骤了：\n```\nstatic invokeDelegate(Func<double, double,. double> op , double first, doube second){\n    Console.WriteLine($\"LoingOperation Result is : {0}\", op(first, second));\n}\ninvokeDelegate(MathOperat ions.TwoLongsAdd, 1.0, 2.0);\n```\n这段代码和以上的三段加在一起实现的功能是等价的，这让委托的语法变得更简洁了。\n## 4.多播委托\n和函数指针显著不同的一点是，.NET允许我们包含多个函数调用，只需要调用一个委托，就可以一次执行这个委托中包含的所有方法，我们称这个特性为多播委托。\n需要注意的是，多播委托引用的函数的返回类型必须是void，否则，我们只能得到最后一个函数调用结果。具体的例子可以参考C#高级编程或者是msdn文档。\n# 委托的实现\n事实上，当我们声明一个委托时，实际上定义了一个新类，一个派生于System.MulticastDelegate 的类，而System.MulticastDelegate 又派生于System.Delegate。这两个类很有意思，.NET能够创建派生于它们的类，程序员不能手动创建它们。如果你尝试手动继承一个Delegate或者MulticastDelegate类，会看到这样的错误信息：\n`Error CS0644:'XXXXClass' cannot derive from special class 'MulticastDelegate' `\n\nDelegate 和 MulticastDelegate被.NET定义为特殊类，我们无法创建一个派生自特殊类的自定义类。\n观察C#的源码（[http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dchttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc)），我们可以发现，微软用一个enum类型SpecialType直接hardcode了所有的特殊类，实现方式相当巨硬。。。","source":"_posts/C-Delegate.md","raw":"---\ntitle: 'C# 委托'\ndate: 2018-02-20 11:44:09\ntags:\n---\n# 委托是什么\n在C语言中，有一个函数指针的概念：\n`returnType (*func)(T1,  T2...)`\n\n在这样一个语句中，我们定义了指向返回类型是returnType，参数为T1，T2...的函数的指针func，func实质上是一个指向函数对应内存地址的指针。\nC#中的委托和函数指针概念很相近，它可以被理解为是.NET中类型安全的函数指针。委托允许我们在运行时指定调用的方法，但是该方法必须符合一定的规范（与所定义委托的返回类型和参数相同）。\n实际上，.NET是在C语言函数指针的基础上为函数添加了一个容器（本文中的委托），只有符合这个容器尺寸（返回值，参数列表相同）的函数才能被装进这个容器。在Runtime，.NET会通过调用 容器代码来达成C语言中直接调用函数指针的目的。这也是委托为什么是类型安全的原因。\n有趣的是，委托只检查传入函数的返回值和参数，并不关注传入函数是实例方法还是静态方法，它能接收这两种函数类型。\n# 委托的使用\n## 1.声明\n在使用委托之前，我们首先需要声明它。\n委托在定义时和关键字的使用方法类似，我们只需要在声明函数的语句前面加一个delegate，就把这个语句变成了委托声明语句，比如:\ndelegate double TwoLongsOp(long first, long second);\n\n定义了一个输入两个long参数，返回一个double值的委托 TwoLongsOp。\n## 2.使用\n要想使用委托，我们还需要定义一个满足如上输入输出的函数，比如：\n```\nclass MathOperations{\n      double static TwoLongsAdd( long first, long second){\n             return first + second;\n        }\n}\n```\n这里定义一个静态方法，然后，定义一个委托实例：\n`TwoLongsOp  addOp = MathOperations.TwoLongsAdd; `\n\n这样就完成了一个委托的初始化，addOp现在是一个引用MathOperations类中静态方法TwoLongsAdd，我们可以在代码中使用这个委托调用TwoLongsAdd方法了：\n```\nstatic invokeDelegate(TwoLongsOp op, double first, double second){\n       Console.WriteLine($\"LoingOperation Result is : {0}\", op(first, second));\n}\ninvokeDelegate(addOp, 1.0, 2.0);\n```\n以上代码的运行结果是“LoingOperation Result is : 3.0 ”\n## 3.Action<T> 和 Func <T>\n这是C#的语法糖，它们的作用在于更简洁地声明和使用委托，节约代码空间和程序员时间。使用它们，我们就可以省去之前的声明和赋值步骤了：\n```\nstatic invokeDelegate(Func<double, double,. double> op , double first, doube second){\n    Console.WriteLine($\"LoingOperation Result is : {0}\", op(first, second));\n}\ninvokeDelegate(MathOperat ions.TwoLongsAdd, 1.0, 2.0);\n```\n这段代码和以上的三段加在一起实现的功能是等价的，这让委托的语法变得更简洁了。\n## 4.多播委托\n和函数指针显著不同的一点是，.NET允许我们包含多个函数调用，只需要调用一个委托，就可以一次执行这个委托中包含的所有方法，我们称这个特性为多播委托。\n需要注意的是，多播委托引用的函数的返回类型必须是void，否则，我们只能得到最后一个函数调用结果。具体的例子可以参考C#高级编程或者是msdn文档。\n# 委托的实现\n事实上，当我们声明一个委托时，实际上定义了一个新类，一个派生于System.MulticastDelegate 的类，而System.MulticastDelegate 又派生于System.Delegate。这两个类很有意思，.NET能够创建派生于它们的类，程序员不能手动创建它们。如果你尝试手动继承一个Delegate或者MulticastDelegate类，会看到这样的错误信息：\n`Error CS0644:'XXXXClass' cannot derive from special class 'MulticastDelegate' `\n\nDelegate 和 MulticastDelegate被.NET定义为特殊类，我们无法创建一个派生自特殊类的自定义类。\n观察C#的源码（[http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dchttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc)），我们可以发现，微软用一个enum类型SpecialType直接hardcode了所有的特殊类，实现方式相当巨硬。。。","slug":"C-Delegate","published":1,"updated":"2018-10-07T13:57:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn0hekml0000tacnelpi3m3d","content":"<h1 id=\"委托是什么\"><a href=\"#委托是什么\" class=\"headerlink\" title=\"委托是什么\"></a>委托是什么</h1><p>在C语言中，有一个函数指针的概念：<br><code>returnType (*func)(T1,  T2...)</code></p>\n<p>在这样一个语句中，我们定义了指向返回类型是returnType，参数为T1，T2…的函数的指针func，func实质上是一个指向函数对应内存地址的指针。<br>C#中的委托和函数指针概念很相近，它可以被理解为是.NET中类型安全的函数指针。委托允许我们在运行时指定调用的方法，但是该方法必须符合一定的规范（与所定义委托的返回类型和参数相同）。<br>实际上，.NET是在C语言函数指针的基础上为函数添加了一个容器（本文中的委托），只有符合这个容器尺寸（返回值，参数列表相同）的函数才能被装进这个容器。在Runtime，.NET会通过调用 容器代码来达成C语言中直接调用函数指针的目的。这也是委托为什么是类型安全的原因。<br>有趣的是，委托只检查传入函数的返回值和参数，并不关注传入函数是实例方法还是静态方法，它能接收这两种函数类型。</p>\n<h1 id=\"委托的使用\"><a href=\"#委托的使用\" class=\"headerlink\" title=\"委托的使用\"></a>委托的使用</h1><h2 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h2><p>在使用委托之前，我们首先需要声明它。<br>委托在定义时和关键字的使用方法类似，我们只需要在声明函数的语句前面加一个delegate，就把这个语句变成了委托声明语句，比如:<br>delegate double TwoLongsOp(long first, long second);</p>\n<p>定义了一个输入两个long参数，返回一个double值的委托 TwoLongsOp。</p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h2><p>要想使用委托，我们还需要定义一个满足如上输入输出的函数，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MathOperations&#123;</span><br><span class=\"line\">      double static TwoLongsAdd( long first, long second)&#123;</span><br><span class=\"line\">             return first + second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里定义一个静态方法，然后，定义一个委托实例：<br><code>TwoLongsOp  addOp = MathOperations.TwoLongsAdd;</code></p>\n<p>这样就完成了一个委托的初始化，addOp现在是一个引用MathOperations类中静态方法TwoLongsAdd，我们可以在代码中使用这个委托调用TwoLongsAdd方法了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static invokeDelegate(TwoLongsOp op, double first, double second)&#123;</span><br><span class=\"line\">       Console.WriteLine($&quot;LoingOperation Result is : &#123;0&#125;&quot;, op(first, second));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">invokeDelegate(addOp, 1.0, 2.0);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果是“LoingOperation Result is : 3.0 ”</p>\n<h2 id=\"3-Action-和-Func\"><a href=\"#3-Action-和-Func\" class=\"headerlink\" title=\"3.Action 和 Func \"></a>3.Action<t> 和 Func <t></t></t></h2><p>这是C#的语法糖，它们的作用在于更简洁地声明和使用委托，节约代码空间和程序员时间。使用它们，我们就可以省去之前的声明和赋值步骤了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static invokeDelegate(Func&lt;double, double,. double&gt; op , double first, doube second)&#123;</span><br><span class=\"line\">    Console.WriteLine($&quot;LoingOperation Result is : &#123;0&#125;&quot;, op(first, second));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">invokeDelegate(MathOperat ions.TwoLongsAdd, 1.0, 2.0);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码和以上的三段加在一起实现的功能是等价的，这让委托的语法变得更简洁了。</p>\n<h2 id=\"4-多播委托\"><a href=\"#4-多播委托\" class=\"headerlink\" title=\"4.多播委托\"></a>4.多播委托</h2><p>和函数指针显著不同的一点是，.NET允许我们包含多个函数调用，只需要调用一个委托，就可以一次执行这个委托中包含的所有方法，我们称这个特性为多播委托。<br>需要注意的是，多播委托引用的函数的返回类型必须是void，否则，我们只能得到最后一个函数调用结果。具体的例子可以参考C#高级编程或者是msdn文档。</p>\n<h1 id=\"委托的实现\"><a href=\"#委托的实现\" class=\"headerlink\" title=\"委托的实现\"></a>委托的实现</h1><p>事实上，当我们声明一个委托时，实际上定义了一个新类，一个派生于System.MulticastDelegate 的类，而System.MulticastDelegate 又派生于System.Delegate。这两个类很有意思，.NET能够创建派生于它们的类，程序员不能手动创建它们。如果你尝试手动继承一个Delegate或者MulticastDelegate类，会看到这样的错误信息：<br><code>Error CS0644:&#39;XXXXClass&#39; cannot derive from special class &#39;MulticastDelegate&#39;</code></p>\n<p>Delegate 和 MulticastDelegate被.NET定义为特殊类，我们无法创建一个派生自特殊类的自定义类。<br>观察C#的源码（<a href=\"http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dchttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc\" target=\"_blank\" rel=\"noopener\">http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc</a>），我们可以发现，微软用一个enum类型SpecialType直接hardcode了所有的特殊类，实现方式相当巨硬。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"委托是什么\"><a href=\"#委托是什么\" class=\"headerlink\" title=\"委托是什么\"></a>委托是什么</h1><p>在C语言中，有一个函数指针的概念：<br><code>returnType (*func)(T1,  T2...)</code></p>\n<p>在这样一个语句中，我们定义了指向返回类型是returnType，参数为T1，T2…的函数的指针func，func实质上是一个指向函数对应内存地址的指针。<br>C#中的委托和函数指针概念很相近，它可以被理解为是.NET中类型安全的函数指针。委托允许我们在运行时指定调用的方法，但是该方法必须符合一定的规范（与所定义委托的返回类型和参数相同）。<br>实际上，.NET是在C语言函数指针的基础上为函数添加了一个容器（本文中的委托），只有符合这个容器尺寸（返回值，参数列表相同）的函数才能被装进这个容器。在Runtime，.NET会通过调用 容器代码来达成C语言中直接调用函数指针的目的。这也是委托为什么是类型安全的原因。<br>有趣的是，委托只检查传入函数的返回值和参数，并不关注传入函数是实例方法还是静态方法，它能接收这两种函数类型。</p>\n<h1 id=\"委托的使用\"><a href=\"#委托的使用\" class=\"headerlink\" title=\"委托的使用\"></a>委托的使用</h1><h2 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h2><p>在使用委托之前，我们首先需要声明它。<br>委托在定义时和关键字的使用方法类似，我们只需要在声明函数的语句前面加一个delegate，就把这个语句变成了委托声明语句，比如:<br>delegate double TwoLongsOp(long first, long second);</p>\n<p>定义了一个输入两个long参数，返回一个double值的委托 TwoLongsOp。</p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h2><p>要想使用委托，我们还需要定义一个满足如上输入输出的函数，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MathOperations&#123;</span><br><span class=\"line\">      double static TwoLongsAdd( long first, long second)&#123;</span><br><span class=\"line\">             return first + second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里定义一个静态方法，然后，定义一个委托实例：<br><code>TwoLongsOp  addOp = MathOperations.TwoLongsAdd;</code></p>\n<p>这样就完成了一个委托的初始化，addOp现在是一个引用MathOperations类中静态方法TwoLongsAdd，我们可以在代码中使用这个委托调用TwoLongsAdd方法了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static invokeDelegate(TwoLongsOp op, double first, double second)&#123;</span><br><span class=\"line\">       Console.WriteLine($&quot;LoingOperation Result is : &#123;0&#125;&quot;, op(first, second));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">invokeDelegate(addOp, 1.0, 2.0);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果是“LoingOperation Result is : 3.0 ”</p>\n<h2 id=\"3-Action-和-Func\"><a href=\"#3-Action-和-Func\" class=\"headerlink\" title=\"3.Action 和 Func \"></a>3.Action<t> 和 Func <t></t></t></h2><p>这是C#的语法糖，它们的作用在于更简洁地声明和使用委托，节约代码空间和程序员时间。使用它们，我们就可以省去之前的声明和赋值步骤了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static invokeDelegate(Func&lt;double, double,. double&gt; op , double first, doube second)&#123;</span><br><span class=\"line\">    Console.WriteLine($&quot;LoingOperation Result is : &#123;0&#125;&quot;, op(first, second));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">invokeDelegate(MathOperat ions.TwoLongsAdd, 1.0, 2.0);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码和以上的三段加在一起实现的功能是等价的，这让委托的语法变得更简洁了。</p>\n<h2 id=\"4-多播委托\"><a href=\"#4-多播委托\" class=\"headerlink\" title=\"4.多播委托\"></a>4.多播委托</h2><p>和函数指针显著不同的一点是，.NET允许我们包含多个函数调用，只需要调用一个委托，就可以一次执行这个委托中包含的所有方法，我们称这个特性为多播委托。<br>需要注意的是，多播委托引用的函数的返回类型必须是void，否则，我们只能得到最后一个函数调用结果。具体的例子可以参考C#高级编程或者是msdn文档。</p>\n<h1 id=\"委托的实现\"><a href=\"#委托的实现\" class=\"headerlink\" title=\"委托的实现\"></a>委托的实现</h1><p>事实上，当我们声明一个委托时，实际上定义了一个新类，一个派生于System.MulticastDelegate 的类，而System.MulticastDelegate 又派生于System.Delegate。这两个类很有意思，.NET能够创建派生于它们的类，程序员不能手动创建它们。如果你尝试手动继承一个Delegate或者MulticastDelegate类，会看到这样的错误信息：<br><code>Error CS0644:&#39;XXXXClass&#39; cannot derive from special class &#39;MulticastDelegate&#39;</code></p>\n<p>Delegate 和 MulticastDelegate被.NET定义为特殊类，我们无法创建一个派生自特殊类的自定义类。<br>观察C#的源码（<a href=\"http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dchttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc\" target=\"_blank\" rel=\"noopener\">http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/SpecialType.cs,5b11a29d644330dc</a>），我们可以发现，微软用一个enum类型SpecialType直接hardcode了所有的特殊类，实现方式相当巨硬。。。</p>\n"},{"title":"AES 算法","date":"2018-04-24T14:05:37.000Z","_content":"\n## 名称\n**Advanced Encryption Standard** 即 高级加密标准，又叫做 **Rijndael算法**，是一种对称加密算法，它已取代了原有的 **DES** ，在全世界被广泛使用。\n\n## 算法流程\n算法的输入是明文字符串，它会被转换成多个 4 * 4 的字节矩阵，每个矩阵被称为 **体(state)**。每一个体都会进行一遍 AES 算法流程，最终输出加密后的字符串。\nAES 算法流程：\n\n    1. AddRoundKey(轮秘钥加): 距震中的每一个字节都与该次会和密钥做XOR(异或)\n    2. SubBytes(字节替换): 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节\n    3. ShiftRows(行移位): 将距震中的每个横列进行循环式移位\n    4. MixColumns(列混淆): 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，用另外一个 AddRoundKey 代替\n\n### AddRoundKey(轮秘钥加)\n在每一次的加密循环中，都会由主密钥生成一个回合秘钥(Rijndael 秘钥生成方案)。该秘钥的大小和一个体的大小相同，都是一个 4 * 4 的矩阵。将回合秘钥与体的对应字节做异或操作。\n{% asset_img AES-AddRoundKey.png AddRoundKey %}\n\n### SubBytes(字节替换)\n经过了 AddRoundKey 步骤的矩阵，在这一步中，每个字节都会通过 **S-box(S盒)** 转换成另一个字节。S盒具有良好的非线性特性，用于提供加密算法的混淆性。\n{% asset_img S盒.png S-box %}\n\n{% asset_img S盒逆.png Inverse S-box %}\n\n\nS盒 和 S盒逆 都是16 * 16 的矩阵，它们记录了一个字节到另一个自己的转换和逆转换。\n\n### ShiftRows(行移位)\n在这个步骤中，4 * 4 矩阵中的每一行都向左循环位移某个偏移量。在 AES 中， 加密时，第一行维持不变，第二行向左循环移动一个字节，第三行两个字节，第四行三个字节。经过 ShiftRows 之后， 矩阵中的每一个列，都由输入的不同列组成。这个步骤提供了 AES 的扩散性。\n{% asset_img ShiftRows.svg Shfit Rows %}\n\n\n### MixColumns(列混淆)\n列混淆是利用了 GF(2^8) 域上算术特性的一个代替，同样用于提供 AES 的扩散性。\n{% asset_img MixColumns.png Mix Columns %}\n\n\n## 安全性\n针对 AES 的攻击，对于 128 位的秘钥来说，穷举法需要 2的128次方 的复杂度， 目前尚未出现有效的攻击方式。","source":"_posts/AESAlgo.md","raw":"---\ntitle: AES 算法\ndate: 2018-04-24 22:05:37\ntags: 算法\n---\n\n## 名称\n**Advanced Encryption Standard** 即 高级加密标准，又叫做 **Rijndael算法**，是一种对称加密算法，它已取代了原有的 **DES** ，在全世界被广泛使用。\n\n## 算法流程\n算法的输入是明文字符串，它会被转换成多个 4 * 4 的字节矩阵，每个矩阵被称为 **体(state)**。每一个体都会进行一遍 AES 算法流程，最终输出加密后的字符串。\nAES 算法流程：\n\n    1. AddRoundKey(轮秘钥加): 距震中的每一个字节都与该次会和密钥做XOR(异或)\n    2. SubBytes(字节替换): 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节\n    3. ShiftRows(行移位): 将距震中的每个横列进行循环式移位\n    4. MixColumns(列混淆): 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，用另外一个 AddRoundKey 代替\n\n### AddRoundKey(轮秘钥加)\n在每一次的加密循环中，都会由主密钥生成一个回合秘钥(Rijndael 秘钥生成方案)。该秘钥的大小和一个体的大小相同，都是一个 4 * 4 的矩阵。将回合秘钥与体的对应字节做异或操作。\n{% asset_img AES-AddRoundKey.png AddRoundKey %}\n\n### SubBytes(字节替换)\n经过了 AddRoundKey 步骤的矩阵，在这一步中，每个字节都会通过 **S-box(S盒)** 转换成另一个字节。S盒具有良好的非线性特性，用于提供加密算法的混淆性。\n{% asset_img S盒.png S-box %}\n\n{% asset_img S盒逆.png Inverse S-box %}\n\n\nS盒 和 S盒逆 都是16 * 16 的矩阵，它们记录了一个字节到另一个自己的转换和逆转换。\n\n### ShiftRows(行移位)\n在这个步骤中，4 * 4 矩阵中的每一行都向左循环位移某个偏移量。在 AES 中， 加密时，第一行维持不变，第二行向左循环移动一个字节，第三行两个字节，第四行三个字节。经过 ShiftRows 之后， 矩阵中的每一个列，都由输入的不同列组成。这个步骤提供了 AES 的扩散性。\n{% asset_img ShiftRows.svg Shfit Rows %}\n\n\n### MixColumns(列混淆)\n列混淆是利用了 GF(2^8) 域上算术特性的一个代替，同样用于提供 AES 的扩散性。\n{% asset_img MixColumns.png Mix Columns %}\n\n\n## 安全性\n针对 AES 的攻击，对于 128 位的秘钥来说，穷举法需要 2的128次方 的复杂度， 目前尚未出现有效的攻击方式。","slug":"AESAlgo","published":1,"updated":"2018-10-07T13:57:36.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn0hekmp0001tacn5udenr2z","content":"<h2 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h2><p><strong>Advanced Encryption Standard</strong> 即 高级加密标准，又叫做 <strong>Rijndael算法</strong>，是一种对称加密算法，它已取代了原有的 <strong>DES</strong> ，在全世界被广泛使用。</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><p>算法的输入是明文字符串，它会被转换成多个 4 * 4 的字节矩阵，每个矩阵被称为 <strong>体(state)</strong>。每一个体都会进行一遍 AES 算法流程，最终输出加密后的字符串。<br>AES 算法流程：</p>\n<pre><code>1. AddRoundKey(轮秘钥加): 距震中的每一个字节都与该次会和密钥做XOR(异或)\n2. SubBytes(字节替换): 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节\n3. ShiftRows(行移位): 将距震中的每个横列进行循环式移位\n4. MixColumns(列混淆): 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，用另外一个 AddRoundKey 代替\n</code></pre><h3 id=\"AddRoundKey-轮秘钥加\"><a href=\"#AddRoundKey-轮秘钥加\" class=\"headerlink\" title=\"AddRoundKey(轮秘钥加)\"></a>AddRoundKey(轮秘钥加)</h3><p>在每一次的加密循环中，都会由主密钥生成一个回合秘钥(Rijndael 秘钥生成方案)。该秘钥的大小和一个体的大小相同，都是一个 4 * 4 的矩阵。将回合秘钥与体的对应字节做异或操作。<br><img src=\"/2018/04/24/AESAlgo/AES-AddRoundKey.png\" title=\"AddRoundKey\"></p>\n<h3 id=\"SubBytes-字节替换\"><a href=\"#SubBytes-字节替换\" class=\"headerlink\" title=\"SubBytes(字节替换)\"></a>SubBytes(字节替换)</h3><p>经过了 AddRoundKey 步骤的矩阵，在这一步中，每个字节都会通过 <strong>S-box(S盒)</strong> 转换成另一个字节。S盒具有良好的非线性特性，用于提供加密算法的混淆性。<br><img src=\"/2018/04/24/AESAlgo/S盒.png\" title=\"S-box\"></p>\n<img src=\"/2018/04/24/AESAlgo/S盒逆.png\" title=\"Inverse S-box\">\n<p>S盒 和 S盒逆 都是16 * 16 的矩阵，它们记录了一个字节到另一个自己的转换和逆转换。</p>\n<h3 id=\"ShiftRows-行移位\"><a href=\"#ShiftRows-行移位\" class=\"headerlink\" title=\"ShiftRows(行移位)\"></a>ShiftRows(行移位)</h3><p>在这个步骤中，4 * 4 矩阵中的每一行都向左循环位移某个偏移量。在 AES 中， 加密时，第一行维持不变，第二行向左循环移动一个字节，第三行两个字节，第四行三个字节。经过 ShiftRows 之后， 矩阵中的每一个列，都由输入的不同列组成。这个步骤提供了 AES 的扩散性。<br><img src=\"/2018/04/24/AESAlgo/ShiftRows.svg\" title=\"Shfit Rows\"></p>\n<h3 id=\"MixColumns-列混淆\"><a href=\"#MixColumns-列混淆\" class=\"headerlink\" title=\"MixColumns(列混淆)\"></a>MixColumns(列混淆)</h3><p>列混淆是利用了 GF(2^8) 域上算术特性的一个代替，同样用于提供 AES 的扩散性。<br><img src=\"/2018/04/24/AESAlgo/MixColumns.png\" title=\"Mix Columns\"></p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>针对 AES 的攻击，对于 128 位的秘钥来说，穷举法需要 2的128次方 的复杂度， 目前尚未出现有效的攻击方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h2><p><strong>Advanced Encryption Standard</strong> 即 高级加密标准，又叫做 <strong>Rijndael算法</strong>，是一种对称加密算法，它已取代了原有的 <strong>DES</strong> ，在全世界被广泛使用。</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><p>算法的输入是明文字符串，它会被转换成多个 4 * 4 的字节矩阵，每个矩阵被称为 <strong>体(state)</strong>。每一个体都会进行一遍 AES 算法流程，最终输出加密后的字符串。<br>AES 算法流程：</p>\n<pre><code>1. AddRoundKey(轮秘钥加): 距震中的每一个字节都与该次会和密钥做XOR(异或)\n2. SubBytes(字节替换): 通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节\n3. ShiftRows(行移位): 将距震中的每个横列进行循环式移位\n4. MixColumns(列混淆): 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，用另外一个 AddRoundKey 代替\n</code></pre><h3 id=\"AddRoundKey-轮秘钥加\"><a href=\"#AddRoundKey-轮秘钥加\" class=\"headerlink\" title=\"AddRoundKey(轮秘钥加)\"></a>AddRoundKey(轮秘钥加)</h3><p>在每一次的加密循环中，都会由主密钥生成一个回合秘钥(Rijndael 秘钥生成方案)。该秘钥的大小和一个体的大小相同，都是一个 4 * 4 的矩阵。将回合秘钥与体的对应字节做异或操作。<br><img src=\"/2018/04/24/AESAlgo/AES-AddRoundKey.png\" title=\"AddRoundKey\"></p>\n<h3 id=\"SubBytes-字节替换\"><a href=\"#SubBytes-字节替换\" class=\"headerlink\" title=\"SubBytes(字节替换)\"></a>SubBytes(字节替换)</h3><p>经过了 AddRoundKey 步骤的矩阵，在这一步中，每个字节都会通过 <strong>S-box(S盒)</strong> 转换成另一个字节。S盒具有良好的非线性特性，用于提供加密算法的混淆性。<br><img src=\"/2018/04/24/AESAlgo/S盒.png\" title=\"S-box\"></p>\n<img src=\"/2018/04/24/AESAlgo/S盒逆.png\" title=\"Inverse S-box\">\n<p>S盒 和 S盒逆 都是16 * 16 的矩阵，它们记录了一个字节到另一个自己的转换和逆转换。</p>\n<h3 id=\"ShiftRows-行移位\"><a href=\"#ShiftRows-行移位\" class=\"headerlink\" title=\"ShiftRows(行移位)\"></a>ShiftRows(行移位)</h3><p>在这个步骤中，4 * 4 矩阵中的每一行都向左循环位移某个偏移量。在 AES 中， 加密时，第一行维持不变，第二行向左循环移动一个字节，第三行两个字节，第四行三个字节。经过 ShiftRows 之后， 矩阵中的每一个列，都由输入的不同列组成。这个步骤提供了 AES 的扩散性。<br><img src=\"/2018/04/24/AESAlgo/ShiftRows.svg\" title=\"Shfit Rows\"></p>\n<h3 id=\"MixColumns-列混淆\"><a href=\"#MixColumns-列混淆\" class=\"headerlink\" title=\"MixColumns(列混淆)\"></a>MixColumns(列混淆)</h3><p>列混淆是利用了 GF(2^8) 域上算术特性的一个代替，同样用于提供 AES 的扩散性。<br><img src=\"/2018/04/24/AESAlgo/MixColumns.png\" title=\"Mix Columns\"></p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>针对 AES 的攻击，对于 128 位的秘钥来说，穷举法需要 2的128次方 的复杂度， 目前尚未出现有效的攻击方式。</p>\n"},{"title":"C# Dispose 和 Finalize 要点","date":"2018-02-20T03:44:34.000Z","_content":"Dispose 和 Finalize都是用来回收资源的方法，Dispose是IDisposable接口中的方法，而Finalize是Object类中的方法。\n他们主要的异同如下：\n![](http://upload-images.jianshu.io/upload_images/4124281-b6e729889783f8f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![overview.png](http://upload-images.jianshu.io/upload_images/4124281-075fd1c73fcf254c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/C-DisposeVSFinalize.md","raw":"---\ntitle: 'C# Dispose 和 Finalize 要点'\ndate: 2018-02-20 11:44:34\ntags:\n---\nDispose 和 Finalize都是用来回收资源的方法，Dispose是IDisposable接口中的方法，而Finalize是Object类中的方法。\n他们主要的异同如下：\n![](http://upload-images.jianshu.io/upload_images/4124281-b6e729889783f8f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![overview.png](http://upload-images.jianshu.io/upload_images/4124281-075fd1c73fcf254c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"C-DisposeVSFinalize","published":1,"updated":"2018-10-07T13:57:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn0hekmr0002tacn3bilqz5d","content":"<p>Dispose 和 Finalize都是用来回收资源的方法，Dispose是IDisposable接口中的方法，而Finalize是Object类中的方法。<br>他们主要的异同如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/4124281-b6e729889783f8f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4124281-075fd1c73fcf254c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"overview.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Dispose 和 Finalize都是用来回收资源的方法，Dispose是IDisposable接口中的方法，而Finalize是Object类中的方法。<br>他们主要的异同如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/4124281-b6e729889783f8f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4124281-075fd1c73fcf254c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"overview.png\"></p>\n"},{"title":"NGINX 负载均衡","date":"2018-10-08T15:53:39.000Z","_content":"## NGINX 负载均衡\n利用 NGINX 在多个服务实例中做负载均衡是 NGINX 最常用的场景之一。在将我们现在做的产品放到公司的 AWS 上的时候，我接触到了这些，并且修改了 CI team 的部分 NGINX 配置，让它能够正确地完成反向代理的工作。\n\n## 配置\n在做负载均衡前，我们首先需要定义一个 Server 组用来表示所有存在的后台服务：\n```json\nhttp {\n    upstream backend {\n        server backend1.example.com weight=5;\n        server backend2.example.com;\n        server 192.0.0.1 backup;\n    }\n}\n```\n\n然后，我们需要把流量重定向到上一步定义的 backend 上去, 我们可以通过指定 proxy_pass 的值来完成这一操作：\n```json\n    upstream backend {\n        server backend1.example.com;\n        server backend2.example.com;\n        server 192.0.0.1 backup;\n    }\n\n    server {\n        location / {\n            proxy_pass http://backend;\n        }\n    }\n}\n```\n这里我们将所有的流量重定向到 http://backend , 这将这个 NGINX 实例上的所有流量重定向到之前定义的 backend 上去。\n\n## 负载均衡算法\n当没有指定任何信息时， NGINX 默认使用了 Round Robin(轮询)算法来重定向流量。其实 NGINX 提供了多种算法来做负载均衡，下面我们来介绍一下：\n\n### Round Robin (轮询)\n在没有指定 weight(权重) 的情况下，Round Robin 会将所有请求均匀地分发给所有后台服务实例：\n```json\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n这里我们没有指定权重，所以两个后台服务会收到等量的请求。但是，当指定了权重之后，NGINX 就会将权重考虑在内：\n```json\nupstream backend {\n    server backend1.example.com weight=5;\n    server backend2.example.com;\n}\n```\n在 NGINX 中，weight 默认被设置为 1。这里我们用一开始的配置举例， backend1.example.com 的权重被设置为 5，另一个的权重没设置，所以是默认值 1。我们也没有设置轮询算法，所以这时候 NGINX 会以 5：1 的比例转发请求，即 6 个请求中， 5 个被放到了 backend1.example.com 上， 有一个被发到了 backend2.example.com 上。\n\n### Least Connections（最少连接算法）\n在这个模式下，一个请求会被 NGINX 转发到当前活跃请求数量最少的服务实例上：\n```json\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n我们用 least_conn 来指定最少连接优先算法, NGINX 会优先转发请求到现有连接数少的那一个服务实例上。\n\n### IP Hash (IP 哈希)\n在 IP Hash 模式下，NGINX 会根据发送请求的 IP 地址的 hash 值来决定将这个请求转发给哪个后端服务实例。被 hash 的 IP 地址要么是 IPv4 地址的前三个 16 进制数或者是整个 IPv6 地址。使用这个模式的负载均衡模式可以保证来自同一个 IP 的请求被转发到同一个服务实例上。当然，这种方法在某一个后端实例发生故障时候会导致一些节点的访问出现问题。\n```json\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n如果某一台服务器出现故障或者无法进行服务，我们可以给它标记上 down，这样之前被转发到这台服务器上的请求就会重新进行 hash 计算并转发到新的服务实例上:\n```json\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com down;\n}\n```\n\n### Generic Hash(通用哈希)\n这个模式允许管理员自定义 hash 函数的输入，比如:\n```json\nupstream backend {\n    hash $reqeust_uri consistent;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n在这个例子中，我们以请求中所带的 url 为 hash 的输入。\n注意到这里在 hash 那一行的最后加入了 consistent 这个关键词。这个关键词会使用一种新的 hash 算法 [ketama](https://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients), 该算法会让管理员添加或删除某个服务实例的时候，只有一小部分的请求会被转发到与之前不同的服务实例上去，其他请求仍然会被转发到原有的服务实例上去。\n\n### Random (随机算法)\n顾名思义，每个请求都被随机发送到某个服务实例上去:\n```json\nupstream backend {\n    random;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n    server backend4.example.com;\n}\n```\nRandom 模式还提供了一个参数 two，当这个参数被指定时，NGINX 会先随机地选择两个服务器(考虑 weight)，然后用以下几种方法选择其中的一个服务器:\n\n    1. `least_conn`: 最少连接数\n    2. `least_time=header(NGINX PLUS only)`: 接收到 response header 的最短平均时间\n    3. `least_time=last_byte(NGINX PLUS only)`: 接收到完整请求的最短平均时间\n我们可以参考下面的一个例子:\n```json\nupstream backend {\n    random two least_time=last_byte;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n    server backend4.example.com;\n}\n```\n当环境中有多个负载均衡服务器在向后端服务转发请求时，我们可以考虑使用 Random 模式，在只有单个负载均衡服务器时，一般不建议使用 Random 模式。\n\n### Least Time (NGINX PLUS only)\n这是一个 NGINX PLUS (NGINX 的付费版) 才有的模式，可以将请求优先转发给平均响应时间较短的服务实例，它也有三个模式:\n\n    1. `header`: 从服务器接收到第一个字节的时间\n    2. `last_byte`: 从服务器接收到完整的 response 的时间\n    3. `last_byte inflight`: 从服务器接收到完整地 response 的时间（考虑不完整的请求）\n例子如下:\n```josn\nupstream backend {\n    least_time header;\n    server backend1.example.com;\n    server  backend2.example.com;\n}\n```\n\n## 总结\nNGINX 提供了多种负载均衡模式，在实际使用中，需要根据实际业务需求去做尝试，分析日志来找到最适合当前场景的复杂均衡模式。\n","source":"_posts/NGINX-负载均衡.md","raw":"---\ntitle: NGINX 负载均衡\ndate: 2018-10-08 23:53:39\ntags: NGINX\n---\n## NGINX 负载均衡\n利用 NGINX 在多个服务实例中做负载均衡是 NGINX 最常用的场景之一。在将我们现在做的产品放到公司的 AWS 上的时候，我接触到了这些，并且修改了 CI team 的部分 NGINX 配置，让它能够正确地完成反向代理的工作。\n\n## 配置\n在做负载均衡前，我们首先需要定义一个 Server 组用来表示所有存在的后台服务：\n```json\nhttp {\n    upstream backend {\n        server backend1.example.com weight=5;\n        server backend2.example.com;\n        server 192.0.0.1 backup;\n    }\n}\n```\n\n然后，我们需要把流量重定向到上一步定义的 backend 上去, 我们可以通过指定 proxy_pass 的值来完成这一操作：\n```json\n    upstream backend {\n        server backend1.example.com;\n        server backend2.example.com;\n        server 192.0.0.1 backup;\n    }\n\n    server {\n        location / {\n            proxy_pass http://backend;\n        }\n    }\n}\n```\n这里我们将所有的流量重定向到 http://backend , 这将这个 NGINX 实例上的所有流量重定向到之前定义的 backend 上去。\n\n## 负载均衡算法\n当没有指定任何信息时， NGINX 默认使用了 Round Robin(轮询)算法来重定向流量。其实 NGINX 提供了多种算法来做负载均衡，下面我们来介绍一下：\n\n### Round Robin (轮询)\n在没有指定 weight(权重) 的情况下，Round Robin 会将所有请求均匀地分发给所有后台服务实例：\n```json\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n这里我们没有指定权重，所以两个后台服务会收到等量的请求。但是，当指定了权重之后，NGINX 就会将权重考虑在内：\n```json\nupstream backend {\n    server backend1.example.com weight=5;\n    server backend2.example.com;\n}\n```\n在 NGINX 中，weight 默认被设置为 1。这里我们用一开始的配置举例， backend1.example.com 的权重被设置为 5，另一个的权重没设置，所以是默认值 1。我们也没有设置轮询算法，所以这时候 NGINX 会以 5：1 的比例转发请求，即 6 个请求中， 5 个被放到了 backend1.example.com 上， 有一个被发到了 backend2.example.com 上。\n\n### Least Connections（最少连接算法）\n在这个模式下，一个请求会被 NGINX 转发到当前活跃请求数量最少的服务实例上：\n```json\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n我们用 least_conn 来指定最少连接优先算法, NGINX 会优先转发请求到现有连接数少的那一个服务实例上。\n\n### IP Hash (IP 哈希)\n在 IP Hash 模式下，NGINX 会根据发送请求的 IP 地址的 hash 值来决定将这个请求转发给哪个后端服务实例。被 hash 的 IP 地址要么是 IPv4 地址的前三个 16 进制数或者是整个 IPv6 地址。使用这个模式的负载均衡模式可以保证来自同一个 IP 的请求被转发到同一个服务实例上。当然，这种方法在某一个后端实例发生故障时候会导致一些节点的访问出现问题。\n```json\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n如果某一台服务器出现故障或者无法进行服务，我们可以给它标记上 down，这样之前被转发到这台服务器上的请求就会重新进行 hash 计算并转发到新的服务实例上:\n```json\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com down;\n}\n```\n\n### Generic Hash(通用哈希)\n这个模式允许管理员自定义 hash 函数的输入，比如:\n```json\nupstream backend {\n    hash $reqeust_uri consistent;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n```\n在这个例子中，我们以请求中所带的 url 为 hash 的输入。\n注意到这里在 hash 那一行的最后加入了 consistent 这个关键词。这个关键词会使用一种新的 hash 算法 [ketama](https://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients), 该算法会让管理员添加或删除某个服务实例的时候，只有一小部分的请求会被转发到与之前不同的服务实例上去，其他请求仍然会被转发到原有的服务实例上去。\n\n### Random (随机算法)\n顾名思义，每个请求都被随机发送到某个服务实例上去:\n```json\nupstream backend {\n    random;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n    server backend4.example.com;\n}\n```\nRandom 模式还提供了一个参数 two，当这个参数被指定时，NGINX 会先随机地选择两个服务器(考虑 weight)，然后用以下几种方法选择其中的一个服务器:\n\n    1. `least_conn`: 最少连接数\n    2. `least_time=header(NGINX PLUS only)`: 接收到 response header 的最短平均时间\n    3. `least_time=last_byte(NGINX PLUS only)`: 接收到完整请求的最短平均时间\n我们可以参考下面的一个例子:\n```json\nupstream backend {\n    random two least_time=last_byte;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n    server backend4.example.com;\n}\n```\n当环境中有多个负载均衡服务器在向后端服务转发请求时，我们可以考虑使用 Random 模式，在只有单个负载均衡服务器时，一般不建议使用 Random 模式。\n\n### Least Time (NGINX PLUS only)\n这是一个 NGINX PLUS (NGINX 的付费版) 才有的模式，可以将请求优先转发给平均响应时间较短的服务实例，它也有三个模式:\n\n    1. `header`: 从服务器接收到第一个字节的时间\n    2. `last_byte`: 从服务器接收到完整的 response 的时间\n    3. `last_byte inflight`: 从服务器接收到完整地 response 的时间（考虑不完整的请求）\n例子如下:\n```josn\nupstream backend {\n    least_time header;\n    server backend1.example.com;\n    server  backend2.example.com;\n}\n```\n\n## 总结\nNGINX 提供了多种负载均衡模式，在实际使用中，需要根据实际业务需求去做尝试，分析日志来找到最适合当前场景的复杂均衡模式。\n","slug":"NGINX-负载均衡","published":1,"updated":"2018-10-08T15:59:12.779Z","_id":"cjn0hekmu0004tacnpfq8vuv3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"NGINX-负载均衡\"><a href=\"#NGINX-负载均衡\" class=\"headerlink\" title=\"NGINX 负载均衡\"></a>NGINX 负载均衡</h2><p>利用 NGINX 在多个服务实例中做负载均衡是 NGINX 最常用的场景之一。在将我们现在做的产品放到公司的 AWS 上的时候，我接触到了这些，并且修改了 CI team 的部分 NGINX 配置，让它能够正确地完成反向代理的工作。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在做负载均衡前，我们首先需要定义一个 Server 组用来表示所有存在的后台服务：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream backend &#123;</span><br><span class=\"line\">        server backend1.example.com weight=5;</span><br><span class=\"line\">        server backend2.example.com;</span><br><span class=\"line\">        server 192.0.0.1 backup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后，我们需要把流量重定向到上一步定义的 backend 上去, 我们可以通过指定 proxy_pass 的值来完成这一操作：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    upstream backend &#123;</span><br><span class=\"line\">        server backend1.example.com;</span><br><span class=\"line\">        server backend2.example.com;</span><br><span class=\"line\">        server 192.0.0.1 backup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们将所有的流量重定向到 <a href=\"http://backend\" target=\"_blank\" rel=\"noopener\">http://backend</a> , 这将这个 NGINX 实例上的所有流量重定向到之前定义的 backend 上去。</p>\n<h2 id=\"负载均衡算法\"><a href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"></a>负载均衡算法</h2><p>当没有指定任何信息时， NGINX 默认使用了 Round Robin(轮询)算法来重定向流量。其实 NGINX 提供了多种算法来做负载均衡，下面我们来介绍一下：</p>\n<h3 id=\"Round-Robin-轮询\"><a href=\"#Round-Robin-轮询\" class=\"headerlink\" title=\"Round Robin (轮询)\"></a>Round Robin (轮询)</h3><p>在没有指定 weight(权重) 的情况下，Round Robin 会将所有请求均匀地分发给所有后台服务实例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有指定权重，所以两个后台服务会收到等量的请求。但是，当指定了权重之后，NGINX 就会将权重考虑在内：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com weight=5;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 NGINX 中，weight 默认被设置为 1。这里我们用一开始的配置举例， backend1.example.com 的权重被设置为 5，另一个的权重没设置，所以是默认值 1。我们也没有设置轮询算法，所以这时候 NGINX 会以 5：1 的比例转发请求，即 6 个请求中， 5 个被放到了 backend1.example.com 上， 有一个被发到了 backend2.example.com 上。</p>\n<h3 id=\"Least-Connections（最少连接算法）\"><a href=\"#Least-Connections（最少连接算法）\" class=\"headerlink\" title=\"Least Connections（最少连接算法）\"></a>Least Connections（最少连接算法）</h3><p>在这个模式下，一个请求会被 NGINX 转发到当前活跃请求数量最少的服务实例上：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    least_conn;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们用 least_conn 来指定最少连接优先算法, NGINX 会优先转发请求到现有连接数少的那一个服务实例上。</p>\n<h3 id=\"IP-Hash-IP-哈希\"><a href=\"#IP-Hash-IP-哈希\" class=\"headerlink\" title=\"IP Hash (IP 哈希)\"></a>IP Hash (IP 哈希)</h3><p>在 IP Hash 模式下，NGINX 会根据发送请求的 IP 地址的 hash 值来决定将这个请求转发给哪个后端服务实例。被 hash 的 IP 地址要么是 IPv4 地址的前三个 16 进制数或者是整个 IPv6 地址。使用这个模式的负载均衡模式可以保证来自同一个 IP 的请求被转发到同一个服务实例上。当然，这种方法在某一个后端实例发生故障时候会导致一些节点的访问出现问题。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果某一台服务器出现故障或者无法进行服务，我们可以给它标记上 down，这样之前被转发到这台服务器上的请求就会重新进行 hash 计算并转发到新的服务实例上:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generic-Hash-通用哈希\"><a href=\"#Generic-Hash-通用哈希\" class=\"headerlink\" title=\"Generic Hash(通用哈希)\"></a>Generic Hash(通用哈希)</h3><p>这个模式允许管理员自定义 hash 函数的输入，比如:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    hash $reqeust_uri consistent;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们以请求中所带的 url 为 hash 的输入。<br>注意到这里在 hash 那一行的最后加入了 consistent 这个关键词。这个关键词会使用一种新的 hash 算法 <a href=\"https://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients\" target=\"_blank\" rel=\"noopener\">ketama</a>, 该算法会让管理员添加或删除某个服务实例的时候，只有一小部分的请求会被转发到与之前不同的服务实例上去，其他请求仍然会被转发到原有的服务实例上去。</p>\n<h3 id=\"Random-随机算法\"><a href=\"#Random-随机算法\" class=\"headerlink\" title=\"Random (随机算法)\"></a>Random (随机算法)</h3><p>顾名思义，每个请求都被随机发送到某个服务实例上去:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    random;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Random 模式还提供了一个参数 two，当这个参数被指定时，NGINX 会先随机地选择两个服务器(考虑 weight)，然后用以下几种方法选择其中的一个服务器:</p>\n<pre><code>1. `least_conn`: 最少连接数\n2. `least_time=header(NGINX PLUS only)`: 接收到 response header 的最短平均时间\n3. `least_time=last_byte(NGINX PLUS only)`: 接收到完整请求的最短平均时间\n</code></pre><p>我们可以参考下面的一个例子:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    random two least_time=last_byte;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当环境中有多个负载均衡服务器在向后端服务转发请求时，我们可以考虑使用 Random 模式，在只有单个负载均衡服务器时，一般不建议使用 Random 模式。</p>\n<h3 id=\"Least-Time-NGINX-PLUS-only\"><a href=\"#Least-Time-NGINX-PLUS-only\" class=\"headerlink\" title=\"Least Time (NGINX PLUS only)\"></a>Least Time (NGINX PLUS only)</h3><p>这是一个 NGINX PLUS (NGINX 的付费版) 才有的模式，可以将请求优先转发给平均响应时间较短的服务实例，它也有三个模式:</p>\n<pre><code>1. `header`: 从服务器接收到第一个字节的时间\n2. `last_byte`: 从服务器接收到完整的 response 的时间\n3. `last_byte inflight`: 从服务器接收到完整地 response 的时间（考虑不完整的请求）\n</code></pre><p>例子如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    least_time header;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server  backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>NGINX 提供了多种负载均衡模式，在实际使用中，需要根据实际业务需求去做尝试，分析日志来找到最适合当前场景的复杂均衡模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"NGINX-负载均衡\"><a href=\"#NGINX-负载均衡\" class=\"headerlink\" title=\"NGINX 负载均衡\"></a>NGINX 负载均衡</h2><p>利用 NGINX 在多个服务实例中做负载均衡是 NGINX 最常用的场景之一。在将我们现在做的产品放到公司的 AWS 上的时候，我接触到了这些，并且修改了 CI team 的部分 NGINX 配置，让它能够正确地完成反向代理的工作。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在做负载均衡前，我们首先需要定义一个 Server 组用来表示所有存在的后台服务：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream backend &#123;</span><br><span class=\"line\">        server backend1.example.com weight=5;</span><br><span class=\"line\">        server backend2.example.com;</span><br><span class=\"line\">        server 192.0.0.1 backup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后，我们需要把流量重定向到上一步定义的 backend 上去, 我们可以通过指定 proxy_pass 的值来完成这一操作：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    upstream backend &#123;</span><br><span class=\"line\">        server backend1.example.com;</span><br><span class=\"line\">        server backend2.example.com;</span><br><span class=\"line\">        server 192.0.0.1 backup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们将所有的流量重定向到 <a href=\"http://backend\" target=\"_blank\" rel=\"noopener\">http://backend</a> , 这将这个 NGINX 实例上的所有流量重定向到之前定义的 backend 上去。</p>\n<h2 id=\"负载均衡算法\"><a href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"></a>负载均衡算法</h2><p>当没有指定任何信息时， NGINX 默认使用了 Round Robin(轮询)算法来重定向流量。其实 NGINX 提供了多种算法来做负载均衡，下面我们来介绍一下：</p>\n<h3 id=\"Round-Robin-轮询\"><a href=\"#Round-Robin-轮询\" class=\"headerlink\" title=\"Round Robin (轮询)\"></a>Round Robin (轮询)</h3><p>在没有指定 weight(权重) 的情况下，Round Robin 会将所有请求均匀地分发给所有后台服务实例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有指定权重，所以两个后台服务会收到等量的请求。但是，当指定了权重之后，NGINX 就会将权重考虑在内：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com weight=5;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 NGINX 中，weight 默认被设置为 1。这里我们用一开始的配置举例， backend1.example.com 的权重被设置为 5，另一个的权重没设置，所以是默认值 1。我们也没有设置轮询算法，所以这时候 NGINX 会以 5：1 的比例转发请求，即 6 个请求中， 5 个被放到了 backend1.example.com 上， 有一个被发到了 backend2.example.com 上。</p>\n<h3 id=\"Least-Connections（最少连接算法）\"><a href=\"#Least-Connections（最少连接算法）\" class=\"headerlink\" title=\"Least Connections（最少连接算法）\"></a>Least Connections（最少连接算法）</h3><p>在这个模式下，一个请求会被 NGINX 转发到当前活跃请求数量最少的服务实例上：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    least_conn;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们用 least_conn 来指定最少连接优先算法, NGINX 会优先转发请求到现有连接数少的那一个服务实例上。</p>\n<h3 id=\"IP-Hash-IP-哈希\"><a href=\"#IP-Hash-IP-哈希\" class=\"headerlink\" title=\"IP Hash (IP 哈希)\"></a>IP Hash (IP 哈希)</h3><p>在 IP Hash 模式下，NGINX 会根据发送请求的 IP 地址的 hash 值来决定将这个请求转发给哪个后端服务实例。被 hash 的 IP 地址要么是 IPv4 地址的前三个 16 进制数或者是整个 IPv6 地址。使用这个模式的负载均衡模式可以保证来自同一个 IP 的请求被转发到同一个服务实例上。当然，这种方法在某一个后端实例发生故障时候会导致一些节点的访问出现问题。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果某一台服务器出现故障或者无法进行服务，我们可以给它标记上 down，这样之前被转发到这台服务器上的请求就会重新进行 hash 计算并转发到新的服务实例上:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generic-Hash-通用哈希\"><a href=\"#Generic-Hash-通用哈希\" class=\"headerlink\" title=\"Generic Hash(通用哈希)\"></a>Generic Hash(通用哈希)</h3><p>这个模式允许管理员自定义 hash 函数的输入，比如:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    hash $reqeust_uri consistent;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们以请求中所带的 url 为 hash 的输入。<br>注意到这里在 hash 那一行的最后加入了 consistent 这个关键词。这个关键词会使用一种新的 hash 算法 <a href=\"https://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients\" target=\"_blank\" rel=\"noopener\">ketama</a>, 该算法会让管理员添加或删除某个服务实例的时候，只有一小部分的请求会被转发到与之前不同的服务实例上去，其他请求仍然会被转发到原有的服务实例上去。</p>\n<h3 id=\"Random-随机算法\"><a href=\"#Random-随机算法\" class=\"headerlink\" title=\"Random (随机算法)\"></a>Random (随机算法)</h3><p>顾名思义，每个请求都被随机发送到某个服务实例上去:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    random;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Random 模式还提供了一个参数 two，当这个参数被指定时，NGINX 会先随机地选择两个服务器(考虑 weight)，然后用以下几种方法选择其中的一个服务器:</p>\n<pre><code>1. `least_conn`: 最少连接数\n2. `least_time=header(NGINX PLUS only)`: 接收到 response header 的最短平均时间\n3. `least_time=last_byte(NGINX PLUS only)`: 接收到完整请求的最短平均时间\n</code></pre><p>我们可以参考下面的一个例子:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    random two least_time=last_byte;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当环境中有多个负载均衡服务器在向后端服务转发请求时，我们可以考虑使用 Random 模式，在只有单个负载均衡服务器时，一般不建议使用 Random 模式。</p>\n<h3 id=\"Least-Time-NGINX-PLUS-only\"><a href=\"#Least-Time-NGINX-PLUS-only\" class=\"headerlink\" title=\"Least Time (NGINX PLUS only)\"></a>Least Time (NGINX PLUS only)</h3><p>这是一个 NGINX PLUS (NGINX 的付费版) 才有的模式，可以将请求优先转发给平均响应时间较短的服务实例，它也有三个模式:</p>\n<pre><code>1. `header`: 从服务器接收到第一个字节的时间\n2. `last_byte`: 从服务器接收到完整的 response 的时间\n3. `last_byte inflight`: 从服务器接收到完整地 response 的时间（考虑不完整的请求）\n</code></pre><p>例子如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    least_time header;</span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server  backend2.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>NGINX 提供了多种负载均衡模式，在实际使用中，需要根据实际业务需求去做尝试，分析日志来找到最适合当前场景的复杂均衡模式。</p>\n"},{"title":"C# 单例模式的实现和性能对比","date":"2018-02-20T03:45:07.000Z","_content":"## 简介\n单例指的是**只能存在一个实例的类**（在C#中，更准确的说法是在每个AppDomain之中只能存在一个实例的类，它是软件工程中使用最多的几种模式之一。在第一个使用者创建了这个类的实例之后，其后需要使用这个类的就只能使用之前创建的实例，无法再创建一个新的实例。通常情况下，单例会在第一次被使用时创建。本文会对C#中几种单例的实现方式进行介绍，并分析它们之间的线程安全性和性能差异。\n\n单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：\n\n    . 单例类都只有一个private的无参构造函数\n    . 类声明为sealed（不是必须的）\n    . 类中有一个静态变量保存着所创建的实例的引用\n    . 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）\n\n## 几种实现\n### 一. 非线程安全\n```csharp\n//Bad code! Do not use!\npublic sealed class Singleton\n{\n    private static Singleton instance = null;\n\n    private Singleton()\n    {\n\n    }\n\n    public static Singleton instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = new Singleton();\n            }\n            return instance;\n        }\n    }\n}\n```\n这种方法不是线程安全的，会存在两个线程同时执行`if (instance == null)`并且创建两个不同的instance，后创建的会替换掉新创建的，导致之前拿到的reference为空。\n\n### 二. 简单的线程安全实现\n```csharp\npublic sealed class Singleton\n{\n    private static Singleton instance = null;\n    private static readonly object padlock = new object();\n\n    Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            lock (padlock)\n            {\n                if (instance == null)\n                {\n                    instance = new Singleton();\n                }\n                return instance;\n            }\n        }\n    }\n}\n```\n相比较于实现一，这个版本加上了一个对instance的锁，在调用instance之前要先对padlock上锁，这样就避免了实现一中的线程冲突，该实现自始至终只会创建一个instance了。但是，由于每次调用Instance都会使用到锁，而调用锁的开销较大，这个实现会有一定的性能损失。\n\n注意这里我们使用的是新建一个private的object实例padlock来实现锁操作，而不是直接对Singleton进行上锁。直接对类型上锁会出现潜在的风险，因为这个类型是public的，所以理论上它会在任何code里调用，直接对它上锁会导致性能问题，甚至会出现死锁情况。\n\n**Note**: C#中，同一个线程是可以对一个object进行多次上锁的，但是不同线程之间如果同时上锁，就可能会出现线程等待，或者严重的会出现死锁情况。因此，我们在使用lock时，尽量选择类中的私有变量上锁，这样可以避免上述情况发生。\n\n### 三. 双重验证的线程安全实现\n```csharp\npublic sealed calss Singleton\n{\n    private static Singleton instance = null;\n    private static readonly object padlock = new object();\n\n    Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                lock (padlock)\n                {\n                    if (instance == null)\n                    {\n                        instance = new Singleton();\n                    }\n                }\n            }\n            return instance;\n        }\n    } \n}\n```\n在保证线程安全的同时，这个实现还避免了每次调用Instance都进行lock操作，这会节约一定的时间。\n\n但是，这种实现也有它的缺点：\n\n    1. 无法在Java中工作。（具体原因可以见原文，这边没怎么理解）\n    2. 程序员在自己实现时很容易出错。如果对这个模式的代码进行自己的修改，要倍加小心，因为double check的逻辑较为复杂，很容易出现思考不周而出错的情况。\n\n### 四. 不用锁的线程安全实现\n```csharp\npublic sealed class Singleton\n{\n    //在Singleton第一次被调用时会执行instance的初始化\n    private static readonly Singleton instance = new Singleton();\n\n    //Explicit static consturctor to tell C# compiler \n    //not to mark type as beforefieldinit\n    static Singleton()\n    {\n    }\n\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            return instance;\n        }\n    }\n}\n```\n这个实现很简单，并没有用到锁，但是它仍然是线程安全的。这里使用了一个static，readonly的Singleton实例，它会在Singleton第一次被调用的时候新建一个instance，这里新建时候的线程安全保障是由.NET直接控制的，我们可以认为它是一个原子操作，并且在一个AppDomaing中它只会被创建一次。\n\n这种实现也有一些缺点:\n\n    1. instance被创建的时机不明，任何对Singleton的调用都会提前创建instance\n    2. static构造函数的循环调用。如有A，B两个类，A的静态构造函数中调用了B，而B的静态构造函数中又调用了A，这两个就会形成一个循环调用，严重的会导致程序崩溃。\n    3. 我们需要手动添加Singleton的静态构造函数来确保Singleton类型不会被自动加上beforefieldinit这个Attribute，以此来确保instance会在第一次调用Singleton时才被创建。\n    4. readonly的属性无法在运行时改变，如果我们需要在程序运行时dispose这个instance再重新创建一个新的instance，这种实现方法就无法满足。\n\n### 五. 完全延迟加载实现（fully lazy instantiation）\n```csharp\npublic sealed class Singleton\n{\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance \n    {\n        get\n        {\n            return Nested.instance;\n        }\n    }\n\n    private class Nested\n    {\n        // Explicit static constructor to tell C# compiler\n        // not to mark type as beforefieldinit\n        static Nested()\n        {\n        }\n\n        internal static readonly Singleton instance = new Singleton();\n    }\n}\n```\n实现五是实现四的包装。它确保了instance只会在Instance的get方法里面调用，且只会在第一次调用前初始化。它是实现四的确保延迟加载的版本。\n\n### 六 使用.NET4的Lazy<T>类型\n```csharp\npublic sealed class Singleton\n{\n    private static readonly Lazy<Singleton> lazy = new Lazy<Singleton>(() => new Singleton());\n\n    public static Singleton Instance \n    {\n        get \n        {\n            return lazy.Value;\n        }\n    }\n\n    private Singleton()\n    {\n    }\n}\n```\n.NET4或以上的版本支持Lazy<T>来实现延迟加载，它用最简洁的代码保证了单例的线程安全和延迟加载特性。\n\n## 性能差异\n之前的实现中，我们都在强调代码的线程安全性和延迟加载。然而在实际使用中，如果你的单例类的初始化不是一个很耗时的操作或者初始化顺序不会导致bug，延迟初始化是一个可有可无的特性，因为初始化所占用的时间是可以忽略不计的。\n\n在实际使用场景中，如果你的单例实例会被频繁得调用（如在一个循环中），那么为了保证线程安全而带来的性能消耗是更值得关注的地方。\n\n为了比较这几种实现的性能，我做了一个小测试，循环拿这些实现中的单例9亿次，每次调用instance的方法执行一个count++操作，每隔一百万输出一次，运行环境是MBP上的Visual Studio for Mac。结果如下：\n\n||线程安全性|延迟加载|测试运行时间(ms)|\n|--------------|-------------|-----|---|\n| 实现一 | 否 | 是 | 15532 |\n| 实现二 | 是 | 是 | 45803 |\n| 实现三 | 是 | 是 | 15953 |\n| 实现四 | 是 | 不完全 | 14572 |\n| 实现五 | 是 | 是 | 14295 |\n| 实现六 | 是 | 是 | 22875 |\n\n测试方法并不严谨，但是仍然可以看出，方法二由于每次都需要调用lock，是最耗时的，几乎是其他几个的三倍。排第二的则是使用.NET Lazy类型的实现，比其他多了二分之一左右。其余的四个，则没有明显区别。\n\n## 总结\n总体来说，上面说的多种单例实现方式在现今的计算机性能下差距都不大，除非你需要特别大并发量的调用instance，才会需要去考虑锁的性能问题。\n\n对于一般的开发者来说，使用方法二或者方法六来实现单例已经是足够好的了，方法四和五则需要对C#运行流程有一个较好的认识，并且实现时需要掌握一定技巧，并且他们节省的时间仍然是有限的。\n\n## 引用\n本文大部分是翻译自[Implementing the Singleton Pattern in C#](http://csharpindepth.com/Articles/General/Singleton.aspx)，加上了一部分自己的理解。这是我搜索[static readonly field initializer vs static constructor initialization](https://stackoverflow.com/questions/2761393/static-readonly-field-initializer-vs-static-constructor-initialization)时看到的，在这里对两位作者表示感谢。\n","source":"_posts/C-Singleton.md","raw":"---\ntitle: 'C# 单例模式的实现和性能对比'\ndate: 2018-02-20 11:45:07\ntags:\n---\n## 简介\n单例指的是**只能存在一个实例的类**（在C#中，更准确的说法是在每个AppDomain之中只能存在一个实例的类，它是软件工程中使用最多的几种模式之一。在第一个使用者创建了这个类的实例之后，其后需要使用这个类的就只能使用之前创建的实例，无法再创建一个新的实例。通常情况下，单例会在第一次被使用时创建。本文会对C#中几种单例的实现方式进行介绍，并分析它们之间的线程安全性和性能差异。\n\n单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：\n\n    . 单例类都只有一个private的无参构造函数\n    . 类声明为sealed（不是必须的）\n    . 类中有一个静态变量保存着所创建的实例的引用\n    . 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）\n\n## 几种实现\n### 一. 非线程安全\n```csharp\n//Bad code! Do not use!\npublic sealed class Singleton\n{\n    private static Singleton instance = null;\n\n    private Singleton()\n    {\n\n    }\n\n    public static Singleton instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = new Singleton();\n            }\n            return instance;\n        }\n    }\n}\n```\n这种方法不是线程安全的，会存在两个线程同时执行`if (instance == null)`并且创建两个不同的instance，后创建的会替换掉新创建的，导致之前拿到的reference为空。\n\n### 二. 简单的线程安全实现\n```csharp\npublic sealed class Singleton\n{\n    private static Singleton instance = null;\n    private static readonly object padlock = new object();\n\n    Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            lock (padlock)\n            {\n                if (instance == null)\n                {\n                    instance = new Singleton();\n                }\n                return instance;\n            }\n        }\n    }\n}\n```\n相比较于实现一，这个版本加上了一个对instance的锁，在调用instance之前要先对padlock上锁，这样就避免了实现一中的线程冲突，该实现自始至终只会创建一个instance了。但是，由于每次调用Instance都会使用到锁，而调用锁的开销较大，这个实现会有一定的性能损失。\n\n注意这里我们使用的是新建一个private的object实例padlock来实现锁操作，而不是直接对Singleton进行上锁。直接对类型上锁会出现潜在的风险，因为这个类型是public的，所以理论上它会在任何code里调用，直接对它上锁会导致性能问题，甚至会出现死锁情况。\n\n**Note**: C#中，同一个线程是可以对一个object进行多次上锁的，但是不同线程之间如果同时上锁，就可能会出现线程等待，或者严重的会出现死锁情况。因此，我们在使用lock时，尽量选择类中的私有变量上锁，这样可以避免上述情况发生。\n\n### 三. 双重验证的线程安全实现\n```csharp\npublic sealed calss Singleton\n{\n    private static Singleton instance = null;\n    private static readonly object padlock = new object();\n\n    Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                lock (padlock)\n                {\n                    if (instance == null)\n                    {\n                        instance = new Singleton();\n                    }\n                }\n            }\n            return instance;\n        }\n    } \n}\n```\n在保证线程安全的同时，这个实现还避免了每次调用Instance都进行lock操作，这会节约一定的时间。\n\n但是，这种实现也有它的缺点：\n\n    1. 无法在Java中工作。（具体原因可以见原文，这边没怎么理解）\n    2. 程序员在自己实现时很容易出错。如果对这个模式的代码进行自己的修改，要倍加小心，因为double check的逻辑较为复杂，很容易出现思考不周而出错的情况。\n\n### 四. 不用锁的线程安全实现\n```csharp\npublic sealed class Singleton\n{\n    //在Singleton第一次被调用时会执行instance的初始化\n    private static readonly Singleton instance = new Singleton();\n\n    //Explicit static consturctor to tell C# compiler \n    //not to mark type as beforefieldinit\n    static Singleton()\n    {\n    }\n\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get\n        {\n            return instance;\n        }\n    }\n}\n```\n这个实现很简单，并没有用到锁，但是它仍然是线程安全的。这里使用了一个static，readonly的Singleton实例，它会在Singleton第一次被调用的时候新建一个instance，这里新建时候的线程安全保障是由.NET直接控制的，我们可以认为它是一个原子操作，并且在一个AppDomaing中它只会被创建一次。\n\n这种实现也有一些缺点:\n\n    1. instance被创建的时机不明，任何对Singleton的调用都会提前创建instance\n    2. static构造函数的循环调用。如有A，B两个类，A的静态构造函数中调用了B，而B的静态构造函数中又调用了A，这两个就会形成一个循环调用，严重的会导致程序崩溃。\n    3. 我们需要手动添加Singleton的静态构造函数来确保Singleton类型不会被自动加上beforefieldinit这个Attribute，以此来确保instance会在第一次调用Singleton时才被创建。\n    4. readonly的属性无法在运行时改变，如果我们需要在程序运行时dispose这个instance再重新创建一个新的instance，这种实现方法就无法满足。\n\n### 五. 完全延迟加载实现（fully lazy instantiation）\n```csharp\npublic sealed class Singleton\n{\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance \n    {\n        get\n        {\n            return Nested.instance;\n        }\n    }\n\n    private class Nested\n    {\n        // Explicit static constructor to tell C# compiler\n        // not to mark type as beforefieldinit\n        static Nested()\n        {\n        }\n\n        internal static readonly Singleton instance = new Singleton();\n    }\n}\n```\n实现五是实现四的包装。它确保了instance只会在Instance的get方法里面调用，且只会在第一次调用前初始化。它是实现四的确保延迟加载的版本。\n\n### 六 使用.NET4的Lazy<T>类型\n```csharp\npublic sealed class Singleton\n{\n    private static readonly Lazy<Singleton> lazy = new Lazy<Singleton>(() => new Singleton());\n\n    public static Singleton Instance \n    {\n        get \n        {\n            return lazy.Value;\n        }\n    }\n\n    private Singleton()\n    {\n    }\n}\n```\n.NET4或以上的版本支持Lazy<T>来实现延迟加载，它用最简洁的代码保证了单例的线程安全和延迟加载特性。\n\n## 性能差异\n之前的实现中，我们都在强调代码的线程安全性和延迟加载。然而在实际使用中，如果你的单例类的初始化不是一个很耗时的操作或者初始化顺序不会导致bug，延迟初始化是一个可有可无的特性，因为初始化所占用的时间是可以忽略不计的。\n\n在实际使用场景中，如果你的单例实例会被频繁得调用（如在一个循环中），那么为了保证线程安全而带来的性能消耗是更值得关注的地方。\n\n为了比较这几种实现的性能，我做了一个小测试，循环拿这些实现中的单例9亿次，每次调用instance的方法执行一个count++操作，每隔一百万输出一次，运行环境是MBP上的Visual Studio for Mac。结果如下：\n\n||线程安全性|延迟加载|测试运行时间(ms)|\n|--------------|-------------|-----|---|\n| 实现一 | 否 | 是 | 15532 |\n| 实现二 | 是 | 是 | 45803 |\n| 实现三 | 是 | 是 | 15953 |\n| 实现四 | 是 | 不完全 | 14572 |\n| 实现五 | 是 | 是 | 14295 |\n| 实现六 | 是 | 是 | 22875 |\n\n测试方法并不严谨，但是仍然可以看出，方法二由于每次都需要调用lock，是最耗时的，几乎是其他几个的三倍。排第二的则是使用.NET Lazy类型的实现，比其他多了二分之一左右。其余的四个，则没有明显区别。\n\n## 总结\n总体来说，上面说的多种单例实现方式在现今的计算机性能下差距都不大，除非你需要特别大并发量的调用instance，才会需要去考虑锁的性能问题。\n\n对于一般的开发者来说，使用方法二或者方法六来实现单例已经是足够好的了，方法四和五则需要对C#运行流程有一个较好的认识，并且实现时需要掌握一定技巧，并且他们节省的时间仍然是有限的。\n\n## 引用\n本文大部分是翻译自[Implementing the Singleton Pattern in C#](http://csharpindepth.com/Articles/General/Singleton.aspx)，加上了一部分自己的理解。这是我搜索[static readonly field initializer vs static constructor initialization](https://stackoverflow.com/questions/2761393/static-readonly-field-initializer-vs-static-constructor-initialization)时看到的，在这里对两位作者表示感谢。\n","slug":"C-Singleton","published":1,"updated":"2018-10-07T13:57:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn0hekmv0005tacn2ggk96vl","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>单例指的是<strong>只能存在一个实例的类</strong>（在C#中，更准确的说法是在每个AppDomain之中只能存在一个实例的类，它是软件工程中使用最多的几种模式之一。在第一个使用者创建了这个类的实例之后，其后需要使用这个类的就只能使用之前创建的实例，无法再创建一个新的实例。通常情况下，单例会在第一次被使用时创建。本文会对C#中几种单例的实现方式进行介绍，并分析它们之间的线程安全性和性能差异。</p>\n<p>单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：</p>\n<pre><code>. 单例类都只有一个private的无参构造函数\n. 类声明为sealed（不是必须的）\n. 类中有一个静态变量保存着所创建的实例的引用\n. 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）\n</code></pre><h2 id=\"几种实现\"><a href=\"#几种实现\" class=\"headerlink\" title=\"几种实现\"></a>几种实现</h2><h3 id=\"一-非线程安全\"><a href=\"#一-非线程安全\" class=\"headerlink\" title=\"一. 非线程安全\"></a>一. 非线程安全</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Bad code! Do not use!</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法不是线程安全的，会存在两个线程同时执行<code>if (instance == null)</code>并且创建两个不同的instance，后创建的会替换掉新创建的，导致之前拿到的reference为空。</p>\n<h3 id=\"二-简单的线程安全实现\"><a href=\"#二-简单的线程安全实现\" class=\"headerlink\" title=\"二. 简单的线程安全实现\"></a>二. 简单的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> padlock = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Singleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (padlock)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较于实现一，这个版本加上了一个对instance的锁，在调用instance之前要先对padlock上锁，这样就避免了实现一中的线程冲突，该实现自始至终只会创建一个instance了。但是，由于每次调用Instance都会使用到锁，而调用锁的开销较大，这个实现会有一定的性能损失。</p>\n<p>注意这里我们使用的是新建一个private的object实例padlock来实现锁操作，而不是直接对Singleton进行上锁。直接对类型上锁会出现潜在的风险，因为这个类型是public的，所以理论上它会在任何code里调用，直接对它上锁会导致性能问题，甚至会出现死锁情况。</p>\n<p><strong>Note</strong>: C#中，同一个线程是可以对一个object进行多次上锁的，但是不同线程之间如果同时上锁，就可能会出现线程等待，或者严重的会出现死锁情况。因此，我们在使用lock时，尽量选择类中的私有变量上锁，这样可以避免上述情况发生。</p>\n<h3 id=\"三-双重验证的线程安全实现\"><a href=\"#三-双重验证的线程安全实现\" class=\"headerlink\" title=\"三. 双重验证的线程安全实现\"></a>三. 双重验证的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> calss Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> padlock = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Singleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (padlock)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在保证线程安全的同时，这个实现还避免了每次调用Instance都进行lock操作，这会节约一定的时间。</p>\n<p>但是，这种实现也有它的缺点：</p>\n<pre><code>1. 无法在Java中工作。（具体原因可以见原文，这边没怎么理解）\n2. 程序员在自己实现时很容易出错。如果对这个模式的代码进行自己的修改，要倍加小心，因为double check的逻辑较为复杂，很容易出现思考不周而出错的情况。\n</code></pre><h3 id=\"四-不用锁的线程安全实现\"><a href=\"#四-不用锁的线程安全实现\" class=\"headerlink\" title=\"四. 不用锁的线程安全实现\"></a>四. 不用锁的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在Singleton第一次被调用时会执行instance的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Explicit static consturctor to tell C# compiler </span></span><br><span class=\"line\">    <span class=\"comment\">//not to mark type as beforefieldinit</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个实现很简单，并没有用到锁，但是它仍然是线程安全的。这里使用了一个static，readonly的Singleton实例，它会在Singleton第一次被调用的时候新建一个instance，这里新建时候的线程安全保障是由.NET直接控制的，我们可以认为它是一个原子操作，并且在一个AppDomaing中它只会被创建一次。</p>\n<p>这种实现也有一些缺点:</p>\n<pre><code>1. instance被创建的时机不明，任何对Singleton的调用都会提前创建instance\n2. static构造函数的循环调用。如有A，B两个类，A的静态构造函数中调用了B，而B的静态构造函数中又调用了A，这两个就会形成一个循环调用，严重的会导致程序崩溃。\n3. 我们需要手动添加Singleton的静态构造函数来确保Singleton类型不会被自动加上beforefieldinit这个Attribute，以此来确保instance会在第一次调用Singleton时才被创建。\n4. readonly的属性无法在运行时改变，如果我们需要在程序运行时dispose这个instance再重新创建一个新的instance，这种实现方法就无法满足。\n</code></pre><h3 id=\"五-完全延迟加载实现（fully-lazy-instantiation）\"><a href=\"#五-完全延迟加载实现（fully-lazy-instantiation）\" class=\"headerlink\" title=\"五. 完全延迟加载实现（fully lazy instantiation）\"></a>五. 完全延迟加载实现（fully lazy instantiation）</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Nested.instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">Nested</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Explicit static constructor to tell C# compiler</span></span><br><span class=\"line\">        <span class=\"comment\">// not to mark type as beforefieldinit</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">Nested</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现五是实现四的包装。它确保了instance只会在Instance的get方法里面调用，且只会在第一次调用前初始化。它是实现四的确保延迟加载的版本。</p>\n<h3 id=\"六-使用-NET4的Lazy类型\"><a href=\"#六-使用-NET4的Lazy类型\" class=\"headerlink\" title=\"六 使用.NET4的Lazy类型\"></a>六 使用.NET4的Lazy<t>类型</t></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Lazy&lt;Singleton&gt; lazy = <span class=\"keyword\">new</span> Lazy&lt;Singleton&gt;(() =&gt; <span class=\"keyword\">new</span> Singleton());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lazy.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>.NET4或以上的版本支持Lazy<t>来实现延迟加载，它用最简洁的代码保证了单例的线程安全和延迟加载特性。</t></p>\n<h2 id=\"性能差异\"><a href=\"#性能差异\" class=\"headerlink\" title=\"性能差异\"></a>性能差异</h2><p>之前的实现中，我们都在强调代码的线程安全性和延迟加载。然而在实际使用中，如果你的单例类的初始化不是一个很耗时的操作或者初始化顺序不会导致bug，延迟初始化是一个可有可无的特性，因为初始化所占用的时间是可以忽略不计的。</p>\n<p>在实际使用场景中，如果你的单例实例会被频繁得调用（如在一个循环中），那么为了保证线程安全而带来的性能消耗是更值得关注的地方。</p>\n<p>为了比较这几种实现的性能，我做了一个小测试，循环拿这些实现中的单例9亿次，每次调用instance的方法执行一个count++操作，每隔一百万输出一次，运行环境是MBP上的Visual Studio for Mac。结果如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>线程安全性</th>\n<th>延迟加载</th>\n<th>测试运行时间(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>实现一</td>\n<td>否</td>\n<td>是</td>\n<td>15532</td>\n</tr>\n<tr>\n<td>实现二</td>\n<td>是</td>\n<td>是</td>\n<td>45803</td>\n</tr>\n<tr>\n<td>实现三</td>\n<td>是</td>\n<td>是</td>\n<td>15953</td>\n</tr>\n<tr>\n<td>实现四</td>\n<td>是</td>\n<td>不完全</td>\n<td>14572</td>\n</tr>\n<tr>\n<td>实现五</td>\n<td>是</td>\n<td>是</td>\n<td>14295</td>\n</tr>\n<tr>\n<td>实现六</td>\n<td>是</td>\n<td>是</td>\n<td>22875</td>\n</tr>\n</tbody>\n</table>\n<p>测试方法并不严谨，但是仍然可以看出，方法二由于每次都需要调用lock，是最耗时的，几乎是其他几个的三倍。排第二的则是使用.NET Lazy类型的实现，比其他多了二分之一左右。其余的四个，则没有明显区别。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说，上面说的多种单例实现方式在现今的计算机性能下差距都不大，除非你需要特别大并发量的调用instance，才会需要去考虑锁的性能问题。</p>\n<p>对于一般的开发者来说，使用方法二或者方法六来实现单例已经是足够好的了，方法四和五则需要对C#运行流程有一个较好的认识，并且实现时需要掌握一定技巧，并且他们节省的时间仍然是有限的。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>本文大部分是翻译自<a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\" target=\"_blank\" rel=\"noopener\">Implementing the Singleton Pattern in C#</a>，加上了一部分自己的理解。这是我搜索<a href=\"https://stackoverflow.com/questions/2761393/static-readonly-field-initializer-vs-static-constructor-initialization\" target=\"_blank\" rel=\"noopener\">static readonly field initializer vs static constructor initialization</a>时看到的，在这里对两位作者表示感谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>单例指的是<strong>只能存在一个实例的类</strong>（在C#中，更准确的说法是在每个AppDomain之中只能存在一个实例的类，它是软件工程中使用最多的几种模式之一。在第一个使用者创建了这个类的实例之后，其后需要使用这个类的就只能使用之前创建的实例，无法再创建一个新的实例。通常情况下，单例会在第一次被使用时创建。本文会对C#中几种单例的实现方式进行介绍，并分析它们之间的线程安全性和性能差异。</p>\n<p>单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：</p>\n<pre><code>. 单例类都只有一个private的无参构造函数\n. 类声明为sealed（不是必须的）\n. 类中有一个静态变量保存着所创建的实例的引用\n. 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）\n</code></pre><h2 id=\"几种实现\"><a href=\"#几种实现\" class=\"headerlink\" title=\"几种实现\"></a>几种实现</h2><h3 id=\"一-非线程安全\"><a href=\"#一-非线程安全\" class=\"headerlink\" title=\"一. 非线程安全\"></a>一. 非线程安全</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Bad code! Do not use!</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法不是线程安全的，会存在两个线程同时执行<code>if (instance == null)</code>并且创建两个不同的instance，后创建的会替换掉新创建的，导致之前拿到的reference为空。</p>\n<h3 id=\"二-简单的线程安全实现\"><a href=\"#二-简单的线程安全实现\" class=\"headerlink\" title=\"二. 简单的线程安全实现\"></a>二. 简单的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> padlock = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Singleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (padlock)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较于实现一，这个版本加上了一个对instance的锁，在调用instance之前要先对padlock上锁，这样就避免了实现一中的线程冲突，该实现自始至终只会创建一个instance了。但是，由于每次调用Instance都会使用到锁，而调用锁的开销较大，这个实现会有一定的性能损失。</p>\n<p>注意这里我们使用的是新建一个private的object实例padlock来实现锁操作，而不是直接对Singleton进行上锁。直接对类型上锁会出现潜在的风险，因为这个类型是public的，所以理论上它会在任何code里调用，直接对它上锁会导致性能问题，甚至会出现死锁情况。</p>\n<p><strong>Note</strong>: C#中，同一个线程是可以对一个object进行多次上锁的，但是不同线程之间如果同时上锁，就可能会出现线程等待，或者严重的会出现死锁情况。因此，我们在使用lock时，尽量选择类中的私有变量上锁，这样可以避免上述情况发生。</p>\n<h3 id=\"三-双重验证的线程安全实现\"><a href=\"#三-双重验证的线程安全实现\" class=\"headerlink\" title=\"三. 双重验证的线程安全实现\"></a>三. 双重验证的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> calss Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> padlock = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Singleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (padlock)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在保证线程安全的同时，这个实现还避免了每次调用Instance都进行lock操作，这会节约一定的时间。</p>\n<p>但是，这种实现也有它的缺点：</p>\n<pre><code>1. 无法在Java中工作。（具体原因可以见原文，这边没怎么理解）\n2. 程序员在自己实现时很容易出错。如果对这个模式的代码进行自己的修改，要倍加小心，因为double check的逻辑较为复杂，很容易出现思考不周而出错的情况。\n</code></pre><h3 id=\"四-不用锁的线程安全实现\"><a href=\"#四-不用锁的线程安全实现\" class=\"headerlink\" title=\"四. 不用锁的线程安全实现\"></a>四. 不用锁的线程安全实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在Singleton第一次被调用时会执行instance的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Explicit static consturctor to tell C# compiler </span></span><br><span class=\"line\">    <span class=\"comment\">//not to mark type as beforefieldinit</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个实现很简单，并没有用到锁，但是它仍然是线程安全的。这里使用了一个static，readonly的Singleton实例，它会在Singleton第一次被调用的时候新建一个instance，这里新建时候的线程安全保障是由.NET直接控制的，我们可以认为它是一个原子操作，并且在一个AppDomaing中它只会被创建一次。</p>\n<p>这种实现也有一些缺点:</p>\n<pre><code>1. instance被创建的时机不明，任何对Singleton的调用都会提前创建instance\n2. static构造函数的循环调用。如有A，B两个类，A的静态构造函数中调用了B，而B的静态构造函数中又调用了A，这两个就会形成一个循环调用，严重的会导致程序崩溃。\n3. 我们需要手动添加Singleton的静态构造函数来确保Singleton类型不会被自动加上beforefieldinit这个Attribute，以此来确保instance会在第一次调用Singleton时才被创建。\n4. readonly的属性无法在运行时改变，如果我们需要在程序运行时dispose这个instance再重新创建一个新的instance，这种实现方法就无法满足。\n</code></pre><h3 id=\"五-完全延迟加载实现（fully-lazy-instantiation）\"><a href=\"#五-完全延迟加载实现（fully-lazy-instantiation）\" class=\"headerlink\" title=\"五. 完全延迟加载实现（fully lazy instantiation）\"></a>五. 完全延迟加载实现（fully lazy instantiation）</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Nested.instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">Nested</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Explicit static constructor to tell C# compiler</span></span><br><span class=\"line\">        <span class=\"comment\">// not to mark type as beforefieldinit</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">Nested</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现五是实现四的包装。它确保了instance只会在Instance的get方法里面调用，且只会在第一次调用前初始化。它是实现四的确保延迟加载的版本。</p>\n<h3 id=\"六-使用-NET4的Lazy类型\"><a href=\"#六-使用-NET4的Lazy类型\" class=\"headerlink\" title=\"六 使用.NET4的Lazy类型\"></a>六 使用.NET4的Lazy<t>类型</t></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Lazy&lt;Singleton&gt; lazy = <span class=\"keyword\">new</span> Lazy&lt;Singleton&gt;(() =&gt; <span class=\"keyword\">new</span> Singleton());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lazy.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>.NET4或以上的版本支持Lazy<t>来实现延迟加载，它用最简洁的代码保证了单例的线程安全和延迟加载特性。</t></p>\n<h2 id=\"性能差异\"><a href=\"#性能差异\" class=\"headerlink\" title=\"性能差异\"></a>性能差异</h2><p>之前的实现中，我们都在强调代码的线程安全性和延迟加载。然而在实际使用中，如果你的单例类的初始化不是一个很耗时的操作或者初始化顺序不会导致bug，延迟初始化是一个可有可无的特性，因为初始化所占用的时间是可以忽略不计的。</p>\n<p>在实际使用场景中，如果你的单例实例会被频繁得调用（如在一个循环中），那么为了保证线程安全而带来的性能消耗是更值得关注的地方。</p>\n<p>为了比较这几种实现的性能，我做了一个小测试，循环拿这些实现中的单例9亿次，每次调用instance的方法执行一个count++操作，每隔一百万输出一次，运行环境是MBP上的Visual Studio for Mac。结果如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>线程安全性</th>\n<th>延迟加载</th>\n<th>测试运行时间(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>实现一</td>\n<td>否</td>\n<td>是</td>\n<td>15532</td>\n</tr>\n<tr>\n<td>实现二</td>\n<td>是</td>\n<td>是</td>\n<td>45803</td>\n</tr>\n<tr>\n<td>实现三</td>\n<td>是</td>\n<td>是</td>\n<td>15953</td>\n</tr>\n<tr>\n<td>实现四</td>\n<td>是</td>\n<td>不完全</td>\n<td>14572</td>\n</tr>\n<tr>\n<td>实现五</td>\n<td>是</td>\n<td>是</td>\n<td>14295</td>\n</tr>\n<tr>\n<td>实现六</td>\n<td>是</td>\n<td>是</td>\n<td>22875</td>\n</tr>\n</tbody>\n</table>\n<p>测试方法并不严谨，但是仍然可以看出，方法二由于每次都需要调用lock，是最耗时的，几乎是其他几个的三倍。排第二的则是使用.NET Lazy类型的实现，比其他多了二分之一左右。其余的四个，则没有明显区别。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说，上面说的多种单例实现方式在现今的计算机性能下差距都不大，除非你需要特别大并发量的调用instance，才会需要去考虑锁的性能问题。</p>\n<p>对于一般的开发者来说，使用方法二或者方法六来实现单例已经是足够好的了，方法四和五则需要对C#运行流程有一个较好的认识，并且实现时需要掌握一定技巧，并且他们节省的时间仍然是有限的。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>本文大部分是翻译自<a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\" target=\"_blank\" rel=\"noopener\">Implementing the Singleton Pattern in C#</a>，加上了一部分自己的理解。这是我搜索<a href=\"https://stackoverflow.com/questions/2761393/static-readonly-field-initializer-vs-static-constructor-initialization\" target=\"_blank\" rel=\"noopener\">static readonly field initializer vs static constructor initialization</a>时看到的，在这里对两位作者表示感谢。</p>\n"}],"PostAsset":[{"_id":"source/_posts/AESAlgo/ShiftRows.svg","slug":"ShiftRows.svg","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0},{"_id":"source/_posts/AESAlgo/AES-AddRoundKey.png","slug":"AES-AddRoundKey.png","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0},{"_id":"source/_posts/AESAlgo/MixColumns.png","slug":"MixColumns.png","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0},{"_id":"source/_posts/AESAlgo/S盒.png","slug":"S盒.png","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0},{"_id":"source/_posts/AESAlgo/S盒逆.png","slug":"S盒逆.png","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0},{"_id":"source/_posts/AESAlgo/ShiftRows.png","slug":"ShiftRows.png","post":"cjn0hekmp0001tacn5udenr2z","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjn0hekmp0001tacn5udenr2z","tag_id":"cjn0hekms0003tacn7j7e8tj5","_id":"cjn0hekmw0007tacnd5p3l69v"},{"post_id":"cjn0hekmu0004tacnpfq8vuv3","tag_id":"cjn0heweg0000ttcnmdj061ot","_id":"cjn0hewem0001ttcnz6z9hxs1"}],"Tag":[{"name":"算法","_id":"cjn0hekms0003tacn7j7e8tj5"},{"name":"NGINX;Cloud","_id":"cjn0hekmw0006tacntpg11ndx"},{"name":"NGINX","_id":"cjn0heweg0000ttcnmdj061ot"}]}}